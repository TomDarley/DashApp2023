import dash
from dash import Output, Input, html, callback, dcc, State
from sqlalchemy import create_engine
import geopandas as gpd
import plotly.express as px
from shapely.wkt import loads
import plotly.graph_objects as go
from shapely.geometry import LineString, Polygon
import pandas as pd
import numpy as np
from sqlalchemy.exc import OperationalError
import time
from math import radians, sin, cos, sqrt, atan2
import base64
from dash import clientside_callback

from dash.exceptions import PreventUpdate
MAPBOX_TOKEN =  'pk.eyJ1IjoidGRhcmxleTAxIiwiYSI6ImNsdXYzbmRkcTBlemQyanBqdWd5Y3ZsdnAifQ.-319Ui8Y2KVTnDlfGaPkwA'
# tdarley01
# Plymouth-CO
unit_to_options = {
    "6aSU10": [
        "6a01440",
        "6a01441",
        "6a01442",
        "6a01443",
        "6a01444",
        "6a01445",
        "6a01446",
        "6a01447",
        "6a01448",
        "6a01449",
        "6a01450",
        "6a01451",
        "6a01452",
        "6a01453",
        "6a01454",
        "6a01455",
        "6a01456",
        "6a01457",
        "6a01458",
        "6a01459",
        "6a01460",
        "6a01461",
        "6a01462",
        "6a01463",
        "6a01464",
        "6a01453A",
        "6a01442A",
    ],
    "6aSU12": [
        "6a01613",
        "6a01614",
        "6a01615",
        "6a01616",
        "6a01617",
        "6a01618",
        "6a01619",
        "6a01620",
        "6a01621",
        "6a01622",
        "6a01623",
        "6a01624",
        "6a01625",
    ],
    "6aSU13": [
        "6a01626",
        "6a01627",
        "6a01628",
        "6a01629",
        "6a01630",
        "6a01631",
        "6a01632",
        "6a01633",
        "6a01634",
        "6a01635",
        "6a01636",
        "6a01637",
        "6a01638",
        "6a01639",
        "6a01640",
        "6a01641",
        "6a01642",
        "6a01643",
        "6a01644",
        "6a01645",
        "6a01646",
        "6a01647",
        "6a01648",
        "6a01649",
        "6a01650",
        "6a01651",
        "6a01652",
        "6a01653",
        "6a01654",
        "6a01655",
        "6a01656",
        "6a01657",
        "6a01658",
        "6a01659",
        "6a01660",
        "6a01661",
        "6a01662",
        "6a01663",
    ],
    "6aSU16-1": [
        "6a01765",
        "6a01766",
        "6a01767",
        "6a01768",
        "6a01769",
        "6a01770",
        "6a01771",
        "6a01772",
        "6a01773",
        "6a01774",
        "6a01775",
        "6a01776",
        "6a01777",
        "6a01778",
        "6a01779",
        "6a01780",
        "6a01781",
        "6a01782",
        "6a01783",
        "6a01784",
        "6a01785",
        "6a01786",
        "6a01787",
        "6a01788",
        "6a01789",
        "6a01790",
        "6a01791",
        "6a01792",
        "6a01793",
        "6a01794",
        "6a01795",
        "6a01796",
        "6a01797",
        "6a01798",
        "6a01799",
        "6a01800",
        "6a01801",
        "6a01802",
        "6a01803",
        "6a01804",
        "6a01805",
        "6a01806",
        "6a01807",
        "6a01808",
        "6a01809",
        "6a01810",
        "6a01811",
        "6a01812",
        "6a01813",
        "6a01814",
        "6a01815",
        "6a01816",
        "6a01817",
        "6a01818",
        "6a01819",
        "6a01820",
        "6a01821",
    ],
    "6aSU2": [
        "6a00109",
        "6a00110",
        "6a00111",
        "6a00112",
        "6a00113",
        "6a00114",
        "6a00115",
        "6a00116",
        "6a00118",
        "6a00119",
        "6a00120",
        "6a00121",
        "6a00122",
        "6a00123",
        "6a00124",
        "6a00125",
        "6a00126",
        "6a00127",
        "6a00128",
        "6a00129",
        "6a00130",
        "6a00131",
        "6a00133",
        "6a00134",
        "6a00136",
        "6a00137",
        "6a00138",
        "6a00139",
        "6a00140",
        "6a00141",
        "6a00142",
        "6a00143",
        "6a00144",
        "6a00145",
        "6a00146",
        "6a00147",
        "6a00148",
        "6a00155",
        "6a00161",
        "6a00166",
        "6a00172",
        "6a00184",
        "6a00190",
        "6a00197",
        "6a00108A",
        "6a00108B",
        "6a00109A",
        "6a00116A",
        "6a00178A",
    ],
    "6aSU3-3": [
        "6a00616",
        "6a00617",
        "6a00618",
        "6a00619",
        "6a00620",
        "6a00621",
        "6a00622",
        "6a00623",
    ],
    "6aSU3-5": [
        "6a00648",
        "6a00649",
        "6a00650",
        "6a00651",
        "6a00652",
        "6a00653",
        "6a00654",
        "6a00655",
        "6a00656",
        "6a00657",
        "6a00658",
        "6a00659",
        "6a00660",
    ],
    "6aSU4": [
        "6a00683",
        "6a00684",
        "6a00686",
        "6a00687",
        "6a00688",
        "6a00689",
        "6a00691",
        "6a00692",
        "6a00693",
        "6a00695",
        "6a00698",
        "6a00699",
        "6a00700",
        "6a00701",
        "6a00703",
        "6a00704",
        "6a00705",
        "6a00706",
        "6a00682A",
    ],
    "6aSU5-2": [
        "6a00787",
        "6a00788",
        "6a00789",
        "6a00790",
        "6a00791",
        "6a00792",
        "6a00791A",
    ],
    "6aSU5-4": [
        "6a00900",
        "6a00901",
        "6a00902",
        "6a00903",
        "6a00904",
        "6a00905",
        "6a00906",
        "6a00907",
        "6a00908",
        "6a00909",
        "6a00910",
        "6a00906A",
    ],
    "6aSU6-1": [
        "6a00944",
        "6a00945",
        "6a00946",
        "6a00947",
        "6a00949",
        "6a00950",
        "6a00952",
        "6a00954",
        "6a00953A",
        "6a00951A",
        "6a00947A",
    ],
    "6aSU6-2": [
        "6a00955",
        "6a00956",
        "6a00957",
        "6a00958",
        "6a00959",
        "6a00960",
        "6a00962A",
        "6a00963A",
        "6a00964A",
        "6a00965A",
        "6a00966A",
        "6a00967A",
        "6a00972A",
        "6a00973A",
        "6a00974A",
        "6a00970A",
        "6a00971A",
        "6a00961A",
        "6a00969A",
    ],
    "6aSU7-1": [
        "6a00975",
        "6a00976",
        "6a00977",
        "6a00978",
        "6a00979",
        "6a00980",
        "6a00981",
        "6a00982",
        "6a00983",
        "6a00984",
        "6a00985",
        "6a00986",
        "6a00987",
        "6a00988",
    ],
    "6aSU8-1": [
        "6a01157",
        "6a01158",
        "6a01159",
        "6a01160",
        "6a01161",
        "6a01162",
        "6a01163",
        "6a01164",
        "6a01165",
        "6a01166",
        "6a01167",
        "6a01168",
        "6a01169",
        "6a01170",
        "6a01171",
        "6a01172",
        "6a01173",
        "6a01174",
        "6a01175",
        "6a01176",
        "6a01177",
        "6a01178",
        "6a01179",
        "6a01180",
        "6a01181",
        "6a01182",
        "6a01183",
        "6a01184",
        "6a01185",
        "6a01186",
        "6a01187",
        "6a01188",
        "6a01189",
        "6a01190",
        "6a01191",
        "6a01192",
        "6a01193",
        "6a01194",
        "6a01195",
        "6a01196",
        "6a01197",
        "6a01198",
    ],
    "6aSU8-2": [
        "6a01209",
        "6a01210",
        "6a01211",
        "6a01212",
        "6a01213",
        "6a01214",
        "6a01215",
        "6a01216",
        "6a01217",
        "6a01218",
        "6a01219",
        "6a01217A",
    ],
    "6bSU16-3": [
        "6b00001",
        "6b00002",
        "6b00003",
        "6b00004",
        "6b00005",
        "6b00006",
        "6b00007",
        "6b00008",
        "6b00009",
        "6b00010",
        "6b00011",
        "6b00012",
        "6b00013",
        "6b00014",
        "6b00015",
        "6b00016",
        "6b00017",
        "6b00018",
        "6b00019",
        "6b00020",
        "6b00021",
        "6b00022",
        "6b00023",
        "6b00024",
        "6b00025",
        "6b00026",
        "6b00027",
        "6b00028",
        "6b00029",
        "6b00030",
        "6b00031",
        "6b00032",
        "6b00033",
        "6b00034",
        "6b00035",
        "6b00036",
        "6b00037",
        "6b00038",
        "6b00039",
        "6b00040",
        "6b00041",
        "6b00042",
        "6b00043",
        "6b00044",
        "6b00045",
        "6b00046",
        "6b00047",
        "6b00048",
        "6b00049",
        "6b00050",
        "6b00051",
        "6b00052",
        "6b00053",
        "6b00054",
        "6b00055",
        "6b00056",
        "6b00057",
        "6b00058",
        "6b00059",
        "6b00060",
        "6b00046A",
    ],
    "6bSU17": [
        "6b00064",
        "6b00065",
        "6b00066",
        "6b00067",
        "6b00068",
        "6b00069",
        "6b00070",
        "6b00071",
        "6b00072",
        "6b00073",
        "6b00074",
        "6b00075",
        "6b00076",
        "6b00077",
        "6b00078",
        "6b00079",
        "6b00080",
        "6b00081",
        "6b00082",
        "6b00083",
        "6b00084",
        "6b00085",
        "6b00086",
        "6b00087",
        "6b00088",
        "6b00089",
        "6b00090",
        "6b00091",
        "6b00092",
        "6b00093",
        "6b00094",
        "6b00095",
        "6b00096",
        "6b00097",
        "6b00098",
        "6b00099",
        "6b00100",
        "6b00101",
        "6b00102",
        "6b00103",
        "6b00104",
        "6b00105",
        "6b00106",
        "6b00107",
        "6b00108",
        "6b00109",
        "6b00110",
        "6b00111",
        "6b00112",
        "6b00113",
        "6b00116",
        "6b00117",
        "6b00118",
        "6b00119",
        "6b00120",
        "6b00126",
        "6b00127",
        "6b00128",
        "6b00129",
    ],
    "6bSU18-1": [
        "6b00152",
        "6b00153",
        "6b00154",
        "6b00155",
        "6b00156",
        "6b00157",
        "6b00158",
        "6b00159",
        "6b00160",
        "6b00161",
        "6b00162",
        "6b00163",
        "6b00164",
        "6b00165",
        "6b00166",
        "6b00167",
        "6b00168",
        "6b00169",
        "6b00170",
        "6b00171",
        "6b00172",
        "6b00173",
        "6b00174",
        "6b00175",
        "6b00176",
        "6b00177",
        "6b00178",
        "6b00179",
        "6b00180",
        "6b00181",
        "6b00182",
        "6b00183",
        "6b00184",
        "6b00185",
        "6b00186",
        "6b00187",
        "6b00188",
        "6b00189",
        "6b00190",
        "6b00191",
        "6b00192",
        "6b00193",
        "6b00194",
        "6b00195",
        "6b00196",
        "6b00197",
        "6b00198",
        "6b00199",
        "6b00200",
        "6b00201",
        "6b00202",
        "6b00203",
        "6b00204",
        "6b00205",
        "6b00206",
        "6b00207",
        "6b00208",
        "6b00209",
        "6b00210",
        "6b00211",
        "6b00212",
        "6b00213",
        "6b00214",
        "6b00215",
        "6b00216",
        "6b00217",
        "6b00218",
        "6b00219",
    ],
    "6bSU18-2": [
        "6b00220",
        "6b00221",
        "6b00222",
        "6b00223",
        "6b00224",
        "6b00225",
        "6b00226",
        "6b00227",
        "6b00228",
        "6b00229",
        "6b00230",
        "6b00231",
        "6b00245",
        "6b00246",
        "6b00247",
        "6b00248",
        "6b00249",
        "6b00250",
        "6b00251",
        "6b00252",
        "6b00253",
        "6b00254",
        "6b00255",
        "6b00256",
        "6b00257",
        "6b00258",
        "6b00259",
        "6b00260",
        "6b00261",
        "6b00262",
        "6b00263",
        "6b00264",
    ],
    "6bSU20-1": [
        "6b00396",
        "6b00397",
        "6b00398",
        "6b00399",
        "6b00400",
        "6b00401",
        "6b00402",
        "6b00403",
        "6b00404",
        "6b00405",
        "6b00406",
        "6b00407",
        "6b00408",
        "6b00409",
        "6b00410",
    ],
    "6bSU21-2": [
        "6b00513",
        "6b00514",
        "6b00515",
        "6b00516",
        "6b00517",
        "6b00518",
        "6b00519",
        "6b00520",
        "6b00521",
        "6b00522",
        "6b00523",
        "6b00524",
        "6b00525",
        "6b00526",
        "6b00527",
        "6b00528",
        "6b00529",
        "6b00530",
        "6b00531",
        "6b00529A",
        "6b00520A",
    ],
    "6bSU21-4": [
        "6b00565",
        "6b00566",
        "6b00567",
        "6b00568",
        "6b00569",
        "6b00570",
        "6b00571",
        "6b00572",
        "6b00573",
        "6b00574",
        "6b00575",
        "6b00576",
        "6b00577",
        "6b00578",
        "6b00579",
        "6b00580",
        "6b00581",
        "6b00582",
        "6b00583",
        "6b00584",
        "6b00585",
        "6b00586",
        "6b00589",
        "6b00590",
        "6b00591",
        "6b00592",
        "6b00593",
        "6b00594",
        "6b00595",
        "6b00596",
        "6b00597",
        "6b00598",
    ],
    "6bSU21-5": [
        "6b00608",
        "6b00609",
        "6b00610",
        "6b00611",
        "6b00612",
        "6b00613",
        "6b00614",
        "6b00615",
        "6b00616",
        "6b00617",
        "6b00621",
        "6b00622",
        "6b00623",
        "6b00624",
        "6b00625",
        "6b00626",
        "6b00627",
        "6b00628",
        "6b00629",
        "6b00630",
        "6b00631",
        "6b00632",
        "6b00633",
        "6b00634",
        "6b00635",
        "6b00636",
        "6b00637",
        "6b00638",
        "6b00639",
        "6b00640",
        "6b00641",
        "6b00642",
        "6b00643",
        "6b00644",
        "6b00645",
        "6b00646",
        "6b00647",
        "6b00648",
        "6b00649",
        "6b00650",
        "6b00651",
        "6b00652",
        "6b00653",
    ],
    "6bSU21-6": [
        "6b00672",
        "6b00673",
        "6b00674",
        "6b00675",
        "6b00676",
        "6b00677",
        "6b00678",
        "6b00679",
        "6b00680",
        "6b00681",
        "6b00682",
        "6b00683",
        "6b00684",
        "6b00685",
        "6b00686",
        "6b00687",
    ],
    "6bSU21-8": [
        "6b00715",
        "6b00716",
        "6b00717",
        "6b00718",
        "6b00719",
        "6b00720",
        "6b00721",
        "6b00722",
        "6b00723",
        "6b00724",
        "6b00725",
        "6b00726",
    ],
    "6bSU25-2": [
        "6b01174",
        "6b01175",
        "6b01176",
        "6b01177",
        "6b01178",
        "6b01179",
        "6b01180",
        "6b01181",
        "6b01182",
        "6b01183",
        "6b01184",
        "6b01185",
        "6b01186",
        "6b01187",
    ],
    "6bSU26-1": [
        "6b01218",
        "6b01219",
        "6b01220",
        "6b01221",
        "6b01222",
        "6b01223",
        "6b01224",
        "6b01225",
        "6b01226",
        "6b01227",
        "6b01228",
        "6b01229",
        "6b01230",
        "6b01231",
        "6b01232",
        "6b01233",
        "6b01234",
        "6b01235",
        "6b01236",
        "6b01237",
        "6b01238",
        "6b01239",
        "6b01240",
        "6b01241",
        "6b01242",
        "6b01243",
        "6b01244",
        "6b01245",
        "6b01246",
        "6b01247",
        "6b01248",
        "6b01249",
        "6b01250",
        "6b01251",
        "6b01252",
        "6b01253",
        "6b01254",
        "6b01255",
        "6b01256",
        "6b01257",
        "6b01258",
        "6b01259",
        "6b01261",
        "6b01262",
        "6b01263",
        "6b01264",
        "6b01265",
        "6b01266",
        "6b01267",
        "6b01268",
        "6b01269",
        "6b01270",
        "6b01271",
        "6b01273",
        "6b01274",
        "6b01275",
        "6b01276",
        "6b01277",
        "6b01278",
        "6b01279",
        "6b01280",
        "6b01281",
        "6b01282",
        "6b01283",
        "6b01284",
        "6b01285",
        "6b01286",
        "6b01287",
        "6b01288",
        "6b01289",
        "6b01290",
        "6b01291",
        "6b01292",
        "6b01293",
        "6b01294",
        "6b01295",
        "6b01296",
        "6b01297",
        "6b01298",
        "6b01299",
        "6b01300",
        "6b01301",
        "6b01302",
        "6b01303",
        "6b01304",
        "6b01305",
        "6b01306",
        "6b01307",
        "6b01308",
        "6b01309",
        "6b01310",
        "6b01311",
        "6b01312",
        "6b01313",
        "6b01314",
        "6b01315",
        "6b01316",
        "6b01317",
        "6b01318",
        "6b01319",
        "6b01320",
        "6b01322",
        "6b01323",
        "6b01324",
        "6b01325",
        "6b01268A",
        "6b01259A",
        "6b01272A",
        "6b01278A",
    ],
    "6bSU26-2": [
        "6b01328",
        "6b01329",
        "6b01330",
        "6b01331",
        "6b01332",
        "6b01333",
        "6b01334",
        "6b01335",
        "6b01336",
        "6b01337",
        "6b01338",
        "6b01339",
        "6b01340",
        "6b01341",
        "6b01342",
        "6b01343",
        "6b01344",
        "6b01345",
        "6b01346",
        "6b01347",
        "6b01348",
        "6b01349",
        "6b01350",
        "6b01351",
        "6b01352",
        "6b01353",
        "6b01354",
        "6b01355",
        "6b01356",
        "6b01357",
        "6b01358",
    ],
    "6bSU26-3": [
        "6b01359",
        "6b01360",
        "6b01361",
        "6b01362",
        "6b01363",
        "6b01364",
        "6b01365",
        "6b01366",
        "6b01367",
        "6b01368",
        "6b01369",
        "6b01370",
        "6b01371",
        "6b01372",
        "6b01373",
        "6b01374",
        "6b01375",
        "6b01376",
        "6b01377",
        "6b01378",
        "6b01379",
        "6b01380",
        "6b01381",
        "6b01382",
        "6b01383",
        "6b01384",
        "6b01385",
    ],
    "6cSU28": [
        "6c00255",
        "6c00256",
        "6c00257",
        "6c00263",
        "6c00264",
        "6c00265",
        "6c00265A",
    ],
    "6cSU30-2": [
        "6c00472",
        "6c00473",
        "6c00474",
        "6c00475",
        "6c00476",
        "6c00477",
        "6c00478",
        "6c00478A",
        "6c00472A",
    ],
    "6cSU30-3": ["6c00481"],
    "6cSU30-4": [
        "6c00505",
        "6c00506",
        "6c00507",
        "6c00508",
        "6c00509",
        "6c00510",
        "6c00511",
        "6c00512",
        "6c00513",
        "6c00514",
        "6c00515",
        "6c00516",
        "6c00517",
        "6c00518",
        "6c00519",
        "6c00523",
        "6c00524",
        "6c00525",
        "6c00526",
    ],
    "6cSU31-1": [
        "6c00572",
        "6c00573",
        "6c00574",
        "6c00575",
        "6c00576",
        "6c00577",
        "6c00578",
        "6c00579",
        "6c00580",
        "6c00581",
        "6c00582",
        "6c00583",
        "6c00584",
        "6c00585",
    ],
    "6cSU31-2": [
        "6c00586",
        "6c00587",
        "6c00588",
        "6c00589",
        "6c00590",
        "6c00591",
        "6c00592",
        "6c00593",
        "6c00594",
        "6c00595",
        "6c00596",
        "6c00597",
        "6c00598",
        "6c00599",
        "6c00600",
        "6c00601",
        "6c00602",
        "6c00603",
        "6c00604",
        "6c00605",
        "6c00606",
        "6c00607",
        "6c00608",
        "6c00609",
        "6c00603A",
    ],
    "6cSU31-3": [
        "6c00615",
        "6c00616",
        "6c00617",
        "6c00618",
        "6c00619",
        "6c00620",
        "6c00621",
        "6c00622",
        "6c00623",
    ],
    "6cSU33": ["6c00991", "6c00992", "6c00993"],
    "6cSU38": [
        "6c01296",
        "6c01297",
        "6c01298",
        "6c01299",
        "6c01303",
        "6c01304",
        "6c01305",
        "6c01304A",
    ],
    "6d6D1-3": [
        "6d00277",
        "6d00278",
        "6d00279",
        "6d00280",
        "6d00281",
        "6d00282",
        "6d00283",
        "6d00284",
        "6d00285",
        "6d00286",
        "6d00287",
        "6d00288",
        "6d00289",
        "6d00290",
        "6d00291",
        "6d00292",
        "6d00293",
    ],
    "6d6D1-4": [
        "6d00294",
        "6d00295",
        "6d00296",
        "6d00297",
        "6d00298",
        "6d00299",
        "6d00300",
        "6d00301",
        "6d00302",
        "6d00303",
        "6d00304",
        "6d00305",
        "6d00306",
        "6d00307",
        "6d00308",
        "6d00309",
        "6d00310",
        "6d00311",
        "6d00312",
        "6d00313",
        "6d00314",
        "6d00315",
        "6d00316",
        "6d00317",
        "6d00318",
        "6d00319",
        "6d00320",
        "6d00321",
        "6d00322",
        "6d00323",
        "6d00324",
        "6d00325",
    ],
    "6d6D1-6": [
        "6d00395",
        "6d00396",
        "6d00397",
        "6d00398",
        "6d00399",
        "6d00400",
        "6d00401",
        "6d00402",
        "6d00403",
        "6d00404",
        "6d00405",
        "6d00406",
        "6d00407",
        "6d00408",
        "6d00409",
        "6d00410",
        "6d00411",
        "6d00412",
        "6d00413",
        "6d00414",
        "6d00415",
        "6d00416",
        "6d00417",
        "6d00418",
        "6d00419",
        "6d00420",
        "6d00421",
        "6d00422",
        "6d00423",
        "6d00424",
        "6d00425",
        "6d00426",
        "6d00427",
        "6d00428",
        "6d00429",
        "6d00394A",
    ],
    "6d6D1-8": ["6d00526", "6d00527", "6d00528", "6d00529"],
    "6d6D2-13": [
        "6d01217",
        "6d01218",
        "6d01219",
        "6d01220",
        "6d01221",
        "6d01222",
        "6d01223",
        "6d01224",
        "6d01225",
        "6d01226",
        "6d01227",
        "6d01228",
        "6d01229",
        "6d01230",
        "6d01231",
        "6d01232",
        "6d01233",
        "6d01234",
        "6d01220A",
        "6d01220A",
    ],
    "6d6D2-15": [
        "6d01283",
        "6d01284",
        "6d01286",
        "6d01287",
        "6d01290",
        "6d01291",
        "6d01292",
    ],
    "6d6D2-17": [
        "6d01371",
        "6d01372",
        "6d01373",
        "6d01374",
        "6d01375",
        "6d01376",
        "6d01377",
        "6d01378",
    ],
    "6d6D2-4": [
        "6d00950",
        "6d00951",
        "6d00952",
        "6d00953",
        "6d00954",
        "6d00955",
        "6d00956",
        "6d00957",
        "6d00958",
        "6d00959",
        "6d00960",
        "6d00961",
        "6d00962",
        "6d00963",
        "6d00964",
        "6d00965",
        "6d00966",
        "6d00967",
        "6d00968",
        "6d00969",
    ],
    "6d6D2-7": [
        "6d01002",
        "6d01003",
        "6d01004",
        "6d01005",
        "6d01006",
        "6d01007",
        "6d01008",
        "6d01009",
        "6d01010",
        "6d01011",
        "6d01012",
        "6d01013",
        "6d01014",
        "6d01015",
        "6d01016",
        "6d01017",
        "6d01018",
        "6d01019",
        "6d01020",
        "6d01021",
        "6d01022",
        "6d01023",
        "6d01024",
        "6d01025",
        "6d01026",
        "6d01027",
        "6d01028",
    ],
    "6d6D3-10": [
        "6d01729",
        "6d01730",
        "6d01731",
        "6d01732",
        "6d01733",
        "6d01734",
        "6d01735",
        "6d01736",
        "6d01737",
        "6d01738",
        "6d01739",
        "6d01740",
        "6d01741",
        "6d01742",
        "6d01743",
        "6d01744",
        "6d01745",
        "6d01746",
        "6d01747",
        "6d01748",
        "6d01749",
        "6d01750",
        "6d01751",
        "6d01752",
        "6d01753",
        "6d01754",
    ],
    "6d6D3-12": [
        "6d01819",
        "6d01820",
        "6d01821",
        "6d01822",
        "6d01823",
        "6d01824",
        "6d01825",
        "6d01826",
        "6d01827",
        "6d01828",
        "6d01829",
        "6d01830",
        "6d01831",
        "6d01832",
        "6d01833",
        "6d01834",
        "6d01835",
        "6d01836",
    ],
    "6d6D3-2": ["6d01475", "6d01476", "6d01477", "6d01478", "6d01479"],
    "6d6D3-4": [
        "6d01522",
        "6d01523",
        "6d01524",
        "6d01525",
        "6d01526",
        "6d01527",
        "6d01528",
        "6d01529",
    ],
    "6d6D3-6": [
        "6d01555",
        "6d01556",
        "6d01557",
        "6d01558",
        "6d01559",
        "6d01560",
        "6d01561",
    ],
    "6d6D5-10": ["6d02326", "6d02327", "6d02325A", "6d02328A"],
    "6d6D5-11": ["6d02372", "6d02373A", "6d02370A"],
    "6d6D5-12": [
        "6d02470",
        "6d02471",
        "6d02472",
        "6d02473",
        "6d02474",
        "6d02475",
        "6d02476",
        "6d02477",
        "6d02478",
        "6d02479",
        "6d02480",
        "6d02481",
        "6d02482",
        "6d02483",
        "6d02484",
        "6d02485",
        "6d02486",
    ],
    "6d6D5-14": ["6d02637", "6d02638", "6d02639", "6d02640", "6d02641", "6d02642"],
    "6d6D5-15": [
        "6d02643",
        "6d02644",
        "6d02645",
        "6d02646",
        "6d02647",
        "6d02648",
        "6d02649",
        "6d02650",
        "6d02651",
        "6d02652",
        "6d02653",
        "6d02654",
        "6d02655",
    ],
    "6d6D5-17": ["6d02701A", "6d02700A"],
    "6d6D5-2": [
        "6d02079",
        "6d02080",
        "6d02081",
        "6d02082",
        "6d02083",
        "6d02084",
        "6d02085",
        "6d02096",
        "6d02097",
        "6d02098",
    ],
    "6d6D5-4": ["6d02146", "6d02147", "6d02148", "6d02149"],
    "6eA4-2": ["6e02217A"],
    "6eA8-1": [
        "6e02288",
        "6e02289",
        "6e02290",
        "6e02291",
        "6e02292",
        "6e02293",
        "6e02294",
    ],
    "6eA8-2": ["6e02295", "6e02296", "6e02297", "6e02298", "6e02299", "6e02300"],
    "6eA8-4": ["6e02203", "6e02205", "6e02204"],
    "6eB1-1": ["6e01791", "6e01792", "6e01793", "6e01794", "6e01795", "6e01796"],
    "6eB1-2": ["6e01800"],
    "6eB1-4": [
        "6e01813",
        "6e01814",
        "6e01815",
        "6e01816",
        "6e01817",
        "6e01818",
        "6e01819",
        "6e01820",
        "6e01821",
        "6e01817A",
    ],
    "6eB1-5": ["6e01822", "6e01823", "6e01824"],
    "6eB2-2": ["6e01732"],
    "6eB3-1": ["6e01739", "6e01745A"],
    "6eB3-2": ["6e01753", "6e01755"],
    "6eB3-3": ["6e01757"],
    "6eB4": [
        "6e01766",
        "6e01767",
        "6e01768",
        "6e01769",
        "6e01770",
        "6e01771",
        "6e01772",
        "6e01773",
        "6e01774",
        "6e01775",
        "6e01776",
        "6e01777",
        "6e01778",
        "6e01779",
        "6e01780",
        "6e01781",
        "6e01782",
        "6e01783",
        "6e01784",
        "6e01785",
        "6e01786",
        "6e01787",
        "6e01788",
        "6e01789",
        "6e01790",
        "6e01770A",
        "6e01789A",
    ],
    "6eM1-3": [
        "6e02072",
        "6e02073",
        "6e02074",
        "6e02075",
        "6e02076",
        "6e02077",
        "6e02078",
    ],
    "6eM1-4": ["6e02079", "6e02080", "6e02081", "6e02082"],
    "6eM12": ["6e01968", "6e01969", "6e01970", "6e01971", "6e01972", "6e01968A"],
    "6eM15": [
        "6e02017",
        "6e02018",
        "6e02020",
        "6e02021",
        "6e02023",
        "6e02024",
        "6e02025",
        "6e02026",
        "6e02027",
        "6e02028",
        "6e02018A",
    ],
    "6eM2": ["6e02086", "6e02088", "6e02084A"],
    "6eM3": ["6e02092"],
    "6eM4": [
        "6e02096",
        "6e02097",
        "6e02098",
        "6e02099",
        "6e02100",
        "6e02101",
        "6e02102",
        "6e02103",
    ],
    "6eM5": [
        "6e01854",
        "6e01855",
        "6e01856",
        "6e01857",
        "6e01858",
        "6e01859",
        "6e01860",
        "6e01861",
        "6e01862",
        "6e01863",
        "6e01864",
        "6e01865",
        "6e01866",
        "6e02104",
        "6e02105",
        "6e02106",
        "6e02107",
        "6e02108",
        "6e02109",
        "6e02110",
        "6e02111",
        "6e02112",
        "6e02113",
        "6e02114",
        "6e02115",
        "6e02116",
        "6e02117",
        "6e02118",
        "6e02119",
        "6e02120",
        "6e02121",
        "6e02122",
        "6e02123",
        "6e02124",
        "6e02125",
        "6e02126",
        "6e02127",
        "6e02128",
        "6e02129",
        "6e02130",
        "6e02131",
        "6e02132",
        "6e02133",
        "6e02134",
        "6e02135",
        "6e02136",
        "6e02137",
        "6e02138",
        "6e02139",
        "6e02140",
        "6e02141",
        "6e02143",
        "6e02144",
        "6e02145",
        "6e02146",
        "6e01859A",
    ],
    "6eM6": ["6e01898A"],
    "6eM7": ["6e01932", "6e01933", "6e01930A"],
    "6eM9": [
        "6e01955",
        "6e01956",
        "6e01957",
        "6e01958",
        "6e01959",
        "6e01960",
        "6e01961",
        "6e01962",
    ],
    "6eN1": ["6e01504A", "6e01501A"],
    "6eN2": ["6e01343", "6e01352"],
    "6eN3": ["6e01446", "6e01452", "6e01455"],
    "6eN4": ["6e01479", "6e01489", "6e01494", "6e01498", "6e01500"],
    "6eSU10-1": [
        "6e00730",
        "6e00731",
        "6e00732",
        "6e00733",
        "6e00734",
        "6e00735",
        "6e00736",
        "6e00737",
        "6e00738",
        "6e00739",
        "6e00740",
        "6e00741",
        "6e00742",
        "6e00743",
        "6e00744",
        "6e00745",
        "6e00746",
        "6e00747",
        "6e00748",
        "6e00749",
        "6e00750",
    ],
    "6eSU10-2": [
        "6e00751",
        "6e00752",
        "6e00753",
        "6e00754",
        "6e00755",
        "6e00756",
        "6e00757",
        "6e00758",
        "6e00759",
        "6e00760",
        "6e00761",
        "6e00762",
        "6e00763",
        "6e00764",
        "6e00765",
        "6e00766",
        "6e00767",
        "6e00768",
        "6e00769",
        "6e00770",
        "6e00771",
        "6e00772",
        "6e00773",
        "6e00774",
        "6e00775",
        "6e00776",
        "6e00777",
        "6e00778",
        "6e00779",
        "6e00780",
        "6e00781",
        "6e00782",
        "6e00783",
        "6e00784",
        "6e00785",
        "6e00786",
        "6e00787",
        "6e00788",
        "6e00789",
        "6e00790",
        "6e00791",
        "6e00792",
        "6e00793",
        "6e00794",
        "6e00795",
        "6e00796",
        "6e00797",
        "6e00798",
        "6e00799",
        "6e00800",
        "6e00801",
        "6e00802",
        "6e00803",
        "6e00804",
        "6e00805",
        "6e00806",
        "6e00807",
        "6e00808",
        "6e00809",
        "6e00810",
        "6e00811",
        "6e00812",
        "6e00813",
        "6e00814",
        "6e00815",
        "6e00816",
        "6e00817",
        "6e00818",
        "6e00819",
        "6e00820",
        "6e00821",
        "6e00822",
        "6e00823",
        "6e00824",
    ],
    "6eSU11": [
        "6e00843",
        "6e00844",
        "6e00845",
        "6e00846",
        "6e00847",
        "6e00848",
        "6e00849",
        "6e00850",
        "6e00851",
        "6e00852",
        "6e00853",
        "6e00854",
        "6e00855",
        "6e00856",
        "6e00857",
        "6e00858",
        "6e00859",
        "6e00860",
        "6e00861",
        "6e00862",
        "6e00863",
        "6e00864",
        "6e00865",
        "6e00866",
        "6e00867",
        "6e00868",
        "6e00869",
        "6e00870",
        "6e00871",
        "6e00872",
        "6e00873",
        "6e00874",
        "6e00875",
        "6e00876",
        "6e00877",
        "6e00878",
        "6e00879",
        "6e00880",
        "6e00881",
        "6e00882",
        "6e00883",
        "6e00884",
        "6e00885",
        "6e00886",
    ],
    "6eSU3-2": ["6e00202", "6e00203"],
    "6eSU3-4": ["6e00247", "6e00248", "6e00249", "6e00250", "6e00251", "6e00251A"],
    "6eSU3-6": [
        "6e00261",
        "6e00262",
        "6e00263",
        "6e00264",
        "6e00265",
        "6e00263A",
        "6e00265A",
    ],
    "6eSU4-3": [
        "6e00313",
        "6e00314",
        "6e00315",
        "6e00316",
        "6e00317",
        "6e00318",
        "6e00319",
        "6e00320",
        "6e00321",
        "6e00322",
        "6e00323",
        "6e00324",
        "6e00325",
        "6e00326",
        "6e00327",
        "6e00328",
        "6e00329",
        "6e00330",
        "6e00331",
        "6e00332",
        "6e00333",
        "6e00334",
        "6e00335",
        "6e00336",
        "6e00337",
        "6e00338",
        "6e00339",
        "6e00340",
        "6e00341",
        "6e00342",
        "6e00343",
        "6e00344",
        "6e00345",
        "6e00346",
        "6e00347",
        "6e00348",
    ],
    "6eSU4-4": [
        "6e00349",
        "6e00350",
        "6e00351",
        "6e00352",
        "6e00353",
        "6e00354",
        "6e00355",
        "6e00356",
        "6e00357",
        "6e00358",
        "6e00359",
        "6e00360",
        "6e00361",
    ],
    "6eSU4-5": [
        "6e00362",
        "6e00363",
        "6e00364",
        "6e00365",
        "6e00366",
        "6e00367",
        "6e00368",
        "6e00369",
        "6e00370",
        "6e00371",
        "6e00372",
        "6e00373",
        "6e00374",
        "6e00375",
        "6e00376",
        "6e00377",
        "6e00378",
        "6e00379",
        "6e00380",
        "6e00381",
        "6e00382",
        "6e00383",
        "6e00384",
        "6e00385",
        "6e00386",
        "6e00387",
    ],
    "6eSU4-6": [
        "6e00388",
        "6e00389",
        "6e00390",
        "6e00391",
        "6e00392",
        "6e00393",
        "6e00394",
        "6e00395",
        "6e00396",
        "6e00397",
    ],
    "6eSU6-2": [
        "6e00539",
        "6e00540",
        "6e00506",
        "6e00507",
        "6e00508",
        "6e00509",
        "6e00510",
        "6e00511",
        "6e00512",
        "6e00513",
        "6e00514",
        "6e00515",
        "6e00516",
        "6e00517",
        "6e00518",
        "6e00519",
        "6e00520",
        "6e00521",
        "6e00522",
        "6e00523",
        "6e00524",
        "6e00525",
        "6e00526",
        "6e00527",
        "6e00528",
        "6e00529",
        "6e00530",
        "6e00531",
        "6e00532",
        "6e00533",
        "6e00534",
        "6e00535",
        "6e00536",
        "6e00537",
        "6e00538",
    ],
    "6eSU8-2": [
        "6e00643",
        "6e00644",
        "6e00645",
        "6e00646",
        "6e00647",
        "6e00648",
        "6e00649",
    ],
    "6eSU9-2": [
        "6e00691",
        "6e00692",
        "6e00693",
        "6e00694",
        "6e00695",
        "6e00696",
        "6e00697",
        "6e00698",
        "6e00699",
        "6e00700",
        "6e00701",
        "6e00702",
        "6e00703",
        "6e00704",
        "6e00705",
        "6e00706",
        "6e00707",
        "6e00708",
        "6e00709",
    ],
    "6eT1": [
        "6e01653",
        "6e01654",
        "6e01655",
        "6e01656",
        "6e01657",
        "6e01659",
        "6e01660",
        "6e01661",
        "6e01662",
        "6e01663",
        "6e01664",
        "6e01665",
    ],
    "6eT3-1": [
        "6e01547",
        "6e01548",
        "6e01549",
        "6e01550",
        "6e01551",
        "6e01552",
        "6e01553",
        "6e01554",
    ],
    "6eT3-2": ["6e01558", "6e01564"],
    "6eT4": ["6e01573", "6e01581A", "6e01569A", "6e01575A", "6e01571A"],
    "6eT5": [
        "6e01587",
        "6e01588",
        "6e01589",
        "6e01590",
        "6e01591",
        "6e01592",
        "6e01593",
        "6e01594",
        "6e01595",
        "6e01596",
        "6e01597",
        "6e01598",
        "6e01599",
        "6e01600",
        "6e01601",
        "6e01602",
        "6e01603",
        "6e01604",
        "6e01605",
        "6e01606",
        "6e01607",
        "6e01608",
        "6e01609",
        "6e01611",
        "6e01612",
        "6e01613",
        "6e01614",
        "6e01615",
        "6e01616",
        "6e01617",
        "6e01618",
        "6e01619",
        "6e01620",
        "6e01621",
        "6e01622",
        "6e01623",
        "6e01624",
    ],
    "6eT6": [
        "6e01625",
        "6e01626",
        "6e01627",
        "6e01628",
        "6e01629",
        "6e01630",
        "6e01631",
        "6e01632",
        "6e01633",
        "6e01634",
        "6e01635",
        "6e01636",
        "6e01637",
        "6e01638",
        "6e01639",
        "6e01640",
    ],
    "6eT7": ["6e01650"],

    "7a7A1-2": [
        "7a00042",
        "7a00043",
        "7a00046",
        "7a00047",
        "7a00048",
        "7a00049",
        "7a00050",
        "7a00051",
        "7a00052",
        "7a00053",
        "7a00054",
        "7a00055",
        "7a00056",
        "7a00057",
        "7a00058",
        "7a00059",
        "7a00060",
        "7a00061",
        "7a00062",
        "7a00063",
        "7a00064",
        "7a00065",
        "7a00066",
        "7a00067",
        "7a00068",
        "7a00069",
        "7a00070",
        "7a00071",
        "7a00072",
        "7a00073",
        "7a00074",
        "7a00075",
        "7a00076",
        "7a00077",
        "7a00078",
        "7a00079",
        "7a00080",
        "7a00081",
        "7a00082",
        "7a00083",
        "7a00084",
        "7a00085",
        "7a00086",
        "7a00087",
        "7a00088",
        "7a00089",
        "7a00090",
        "7a00091",
    ],
    "7a7A2-2": [
        "7a00675",
        "7a00676",
        "7a00677",
        "7a00678",
        "7a00679",
        "7a00680",
        "7a00681",
        "7a00682",
        "7a00683",
        "7a00684",
        "7a00685",
        "7a00686",
        "7a00687",
        "7a00688",
        "7a00689",
        "7a00690",
    ],
    "7a7A2-3": ["7a00700", "7a00701", "7a00705", "7a00700A"],
    "7a7A2-4": [
        "7a00710",
        "7a00711",
        "7a00712",
        "7a00713",
        "7a00714",
        "7a00715",
        "7a00716",
        "7a00717",
        "7a00718",
        "7a00719",
        "7a00720",
        "7a00721",
        "7a00722",
        "7a00723",
        "7a00724",
        "7a00725",
        "7a00726",
        "7a00727",
        "7a00728",
        "7a00729",
        "7a00730",
        "7a00731",
        "7a00708A",
        "7a00706A",
        "7a00706B",
    ],
    "7a7A2-5": [
        "7a00746",
        "7a00747",
        "7a00748",
        "7a00749",
        "7a00750",
        "7a00751",
        "7a00752",
        "7a00753",
        "7a00754",
        "7a00755",
        "7a00756",
        "7a00757",
        "7a00758",
        "7a00759",
        "7a00760",
        "7a00761",
        "7a00762",
        "7a00763",
        "7a00764",
        "7a00765",
        "7a00766",
        "7a00767",
        "7a00768",
    ],
    "7a7A2-6": [
        "7a00773",
        "7a00774",
        "7a00775",
        "7a00776",
        "7a00777",
        "7a00778",
        "7a00779",
        "7a00780",
        "7a00781",
        "7a00782",
        "7a00783",
        "7a00784",
        "7a00785",
        "7a00786",
        "7a00787",
        "7a00788",
        "7a00789",
        "7a00790",
        "7a00791",
        "7a00792",
        "7a00793",
        "7a00794",
        "7a00795",
        "7a00796",
        "7a00797",
        "7a00798",
        "7a00799",
        "7a00800",
        "7a00801",
        "7a00802",
        "7a00803",
        "7a00804",
        "7a00805",
        "7a00806",
        "7a00807",
        "7a00808",
        "7a00809",
        "7a00810",
        "7a00811",
        "7a00812",
        "7a00813",
        "7a00814",
        "7a00815",
        "7a00816",
        "7a00817",
        "7a00818",
        "7a00819",
        "7a00820",
        "7a00821",
        "7a00822",
        "7a00823",
        "7a00824",
        "7a00825",
        "7a00826",
    ],
    "7a7A2-7": [
        "7a00827",
        "7a00828",
        "7a00829",
        "7a00830",
        "7a00831",
        "7a00832",
        "7a00833",
        "7a00834",
        "7a00835",
        "7a00836",
        "7a00837",
        "7a00838",
        "7a00839",
        "7a00840",
        "7a00841",
        "7a00842",
        "7a00843",
        "7a00844",
        "7a00845",
        "7a00846",
        "7a00847",
        "7a00848",
        "7a00849",
        "7a00850",
        "7a00851",
        "7a00852",
        "7a00853",
        "7a00854",
        "7a00855",
        "7a00856",
        "7a00857",
        "7a00858",
        "7a00859",
        "7a00860",
        "7a00861",
        "7a00862",
        "7a00863",
        "7a00864",
        "7a00865",
        "7a00866",
        "7a00867",
        "7a00868",
        "7a00869",
        "7a00870",
        "7a00871",
        "7a00872",
        "7a00873",
        "7a00874",
        "7a00875",
        "7a00876",
        "7a00877",
        "7a00878",
        "7a00879",
        "7a00880",
        "7a00881",
        "7a00882",
        "7a00883",
        "7a00884",
        "7a00885",
        "7a00886",
        "7a00887",
        "7a00888",
        "7a00889",
        "7a00890",
        "7a00891",
        "7a00892",
        "7a00893",
        "7a00894",
        "7a00895",
        "7a00896",
        "7a00897",
        "7a00898",
        "7a00899",
        "7a00900",
        "7a00901",
        "7a00902",
        "7a00903",
        "7a00904",
        "7a00905",
        "7a00906",
        "7a00907",
        "7a00908",
        "7a00909",
        "7a00910",
        "7a00911",
        "7a00912",
        "7a00913",
        "7a00914",
        "7a00915",
        "7a00916",
        "7a00917",
        "7a00918",
        "7a00919",
        "7a00920",
        "7a00921",
        "7a00922",
        "7a00923",
        "7a00924",
        "7a00925",
        "7a00926",
        "7a00927",
        "7a00928",
    ],
    "7a7A3-13": [
        "7a01623",
        "7a01624",
        "7a01625",
        "7a01626",
        "7a01627",
        "7a01628",
        "7a01629",
        "7a01630",
        "7a01631",
        "7a01632",
        "7a01633",
        "7a01634",
        "7a01635",
        "7a01636",
        "7a01637",
        "7a01638",
        "7a01639",
        "7a01640",
        "7a01641",
        "7a01642",
        "7a01643",
        "7a01644",
    ],
    "7a7A3-15": [
        "7a01676",
        "7a01677",
        "7a01678",
        "7a01679",
        "7a01680",
        "7a01681",
        "7a01682",
        "7a01683",
        "7a01684",
        "7a01685",
        "7a01686",
        "7a01687",
        "7a01688",
        "7a01689",
        "7a01690",
        "7a01691",
        "7a01692",
        "7a01693",
        "7a01694",
        "7a01695",
        "7a01696",
        "7a01697",
        "7a01698",
        "7a01699",
        "7a01700",
        "7a01695A",
        "7a01692A",
        "7a01694A",
    ],
    "7a7A3-17": [
        "7a01742",
        "7a01743",
        "7a01744",
        "7a01745",
        "7a01746",
        "7a01747",
        "7a01748",
        "7a01749",
        "7a01750",
        "7a01751",
        "7a01752",
        "7a01753",
        "7a01754",
        "7a01755",
        "7a01756",
        "7a01757",
        "7a01758",
        "7a01759",
        "7a01760",
        "7a01761",
        "7a01762",
        "7a01763",
        "7a01764",
        "7a01765",
        "7a01766",
        "7a01767",
        "7a01784",
        "7a01785",
    ],
    "7a7A3-18": [
        "7a01799",
        "7a01800",
        "7a01801",
        "7a01802",
        "7a01803",
        "7a01804",
        "7a01805",
        "7a01806",
        "7a01807",
        "7a01808",
        "7a01809",
        "7a01810",
        "7a01811",
        "7a01812",
        "7a01813",
        "7a01814",
        "7a01815",
        "7a01816",
        "7a01817",
        "7a01818",
        "7a01819",
        "7a01820",
        "7a01821",
        "7a01822",
        "7a01823",
        "7a01824",
        "7a01825",
        "7a01826",
        "7a01827",
        "7a01828",
        "7a01829",
        "7a01830",
        "7a01831",
        "7a01832",
        "7a01833",
        "7a01834",
        "7a01835",
        "7a01836",
        "7a01837",
        "7a01838",
        "7a01839",
        "7a01840",
        "7a01841",
        "7a01842",
        "7a01843",
        "7a01844",
        "7a01845",
        "7a01846",
        "7a01847",
        "7a01848",
        "7a01849",
        "7a01850",
        "7a01851",
        "7a01852",
        "7a01853",
        "7a01854",
        "7a01855",
        "7a01856",
        "7a01857",
        "7a01858",
        "7a01859",
        "7a01860",
        "7a01861",
        "7a01862",
        "7a01863",
        "7a01864",
        "7a01865",
        "7a01866",
        "7a01867",
        "7a01868",
        "7a01869",
        "7a01870",
        "7a01871",
        "7a01872",
        "7a01873",
        "7a01874",
    ],
    "7a7A3-19": [
        "7a01908",
        "7a01909",
        "7a01910",
        "7a01911",
        "7a01912",
        "7a01913",
        "7a01914",
        "7a01915",
        "7a01916",
        "7a01917",
        "7a01918",
        "7a01919",
        "7a01920",
        "7a01921",
        "7a01922",
        "7a01923",
        "7a01924",
    ],
    "7a7A3-2": [
        "7a01102",
        "7a01103",
        "7a01104",
        "7a01105",
        "7a01106",
        "7a01107",
        "7a01108",
        "7a01109",
        "7a01110",
        "7a01111",
    ],
    "7a7A3-21": [
        "7a02027",
        "7a02028",
        "7a02029",
        "7a02030",
        "7a02031",
        "7a02032",
        "7a02033",
        "7a02034",
        "7a02035",
        "7a02036",
    ],
    "7a7A3-23": [
        "7a02070",
        "7a02071",
        "7a02072",
        "7a02073",
        "7a02074",
        "7a02075",
        "7a02076",
        "7a02077",
        "7a02078",
        "7a02079",
        "7a02080",
        "7a02081",
        "7a02082",
        "7a02083",
        "7a02084",
        "7a02085",
        "7a02086",
        "7a02087",
        "7a02088",
        "7a02089",
        "7a02090",
        "7a02091",
        "7a02092",
        "7a02093",
        "7a02094",
        "7a02095",
    ],
    "7a7A3-4": [
        "7a01211",
        "7a01212",
        "7a01213",
        "7a01214",
        "7a01215",
        "7a01216",
        "7a01217",
        "7a01218",
        "7a01219",
        "7a01220",
    ],
    "7a7A3-8": [
        "7a01433",
        "7a01434",
        "7a01435",
        "7a01436",
        "7a01437",
        "7a01438",
        "7a01439",
        "7a01440",
        "7a01441",
        "7a01442",
        "7a01443",
        "7a01444",
        "7a01445",
        "7a01446",
        "7a01447",
        "7a01448",
        "7a01449",
        "7a01450",
    ],
    "7a7A3-9": [
        "7a01451",
        "7a01452",
        "7a01453",
        "7a01454",
        "7a01455",
        "7a01456",
        "7a01457",
        "7a01458",
        "7a01459",
        "7a01460",
        "7a01461",
        "7a01462",
        "7a01463",
        "7a01464",
        "7a01465",
        "7a01466",
        "7a01467",
        "7a01468",
        "7a01469",
        "7a01470",
        "7a01471",
        "7a01472",
        "7a01473",
        "7a01474",
        "7a01475",
        "7a01476",
        "7a01477",
        "7a01478",
        "7a01479",
        "7a01480",
        "7a01481",
        "7a01482",
        "7a01483",
        "7a01484",
        "7a01485",
        "7a01486",
        "7a01487",
        "7a01488",
        "7a01489",
        "7a01490",
        "7a01491",
        "7a01492",
        "7a01493",
        "7a01494",
        "7a01495",
        "7a01496",
        "7a01497",
        "7a01498",
        "7a01499",
        "7a01500",
        "7a01501",
        "7a01502",
        "7a01503",
        "7a01504",
        "7a01505",
    ],
    "7b7B1-2": [
        "7b00067",
        "7b00068",
        "7b00069",
        "7b00070",
        "7b00071",
        "7b00072",
        "7b00073",
        "7b00074",
        "7b00075",
        "7b00076",
        "7b00077",
        "7b00078",
        "7b00079",
        "7b00080",
        "7b00081",
        "7b00082",
        "7b00083",
        "7b00084",
        "7b00085",
        "7b00086",
        "7b00087",
    ],
    "7b7B1-8": [
        "7b00295",
        "7b00296",
        "7b00297",
        "7b00298",
        "7b00299",
        "7b00300",
        "7b00301",
        "7b00302",
        "7b00303",
        "7b00304",
        "7b00305",
        "7b00306",
        "7b00307",
        "7b00308",
        "7b00309",
        "7b00310",
        "7b00311",
        "7b00312",
        "7b00313",
        "7b00314",
        "7b00315",
        "7b00316",
    ],
    "7b7B2-4": [
        "7b00561",
        "7b00562",
        "7b00563",
        "7b00564",
        "7b00565",
        "7b00566",
        "7b00567",
        "7b00568",
        "7b00569",
        "7b00570",
        "7b00581",
        "7b00582",
        "7b00583",
        "7b00584",
        "7b00585",
        "7b00584A",
    ],
    "7b7B3-1": [
        "7b01332",
        "7b01333",
        "7b01334",
        "7b01335",
        "7b01336",
        "7b01337",
        "7b01338",
        "7b01339",
        "7b01340",
        "7b01341",
        "7b01342",
        "7b01343",
        "7b01344",
        "7b01345",
    ],
    "7b7B3-2": [
        "7b01346",
        "7b01347",
        "7b01348",
        "7b01349",
        "7b01350",
        "7b01351",
        "7b01352",
        "7b01353",
        "7b01354",
        "7b01355",
        "7b01356",
        "7b01357",
        "7b01358",
        "7b01359",
        "7b01360",
        "7b01361",
        "7b01362",
        "7b01363",
        "7b01364",
        "7b01365",
        "7b01366",
        "7b01367",
        "7b01368",
        "7b01369",
        "7b01370",
        "7b01371",
        "7b01372",
    ],
    "7b7B3-4": [
        "7b01464",
        "7b01465",
        "7b01466",
        "7b01467",
        "7b01468",
        "7b01469",
        "7b01470",
        "7b01471",
        "7b01472",
        "7b01473",
        "7b01474",
        "7b01475",
        "7b01476",
        "7b01477",
        "7b01478",
        "7b01479",
        "7b01480",
        "7b01481",
        "7b01482",
        "7b01483",
        "7b01484",
        "7b01485",
        "7b01486",
        "7b01487",
        "7b01488",
        "7b01463A",
        "7b01461E",
        "7b01461C",
        "7b01461A",
        "7b01461D",
        "7b01461B",
        "7b01462A",
    ],
    "7cINST2": [
        "7c00637I",
        "7c00637H",
        "7c00637G",
        "7c00637C",
        "7c00637D",
        "7c00637E",
        "7c00637J",
        "7c00637F",
    ],
    "7cSAUN1": [
        "7c00638",
        "7c00639",
        "7c00644",
        "7c00663",
        "7c00673",
        "7c00674",
        "7c00675",
        "7c00676",
        "7c00678",
        "7c00679",
        "7c00680",
        "7c00682",
        "7c00683",
        "7c00684",
        "7c00685",
        "7c00689A",
        "7c00689B",
        "7c00689D",
        "7c00689E",
        "7c00689F",
        "7c00689G",
        "7c00689H",
        "7c00689I",
        "7c00689J",
        "7c00689K",
        "7c00689L",
        "7c00689M",
        "7c00689N",
        "7c00689O",
        "7c00689P",
        "7c00689Q",
        "7c00689R",
        "7c00689S",
        "7c00689T",
        "7c00689U",
        "7c00689V",
        "7c00689W",
        "7c00689X",
        "7c00689Y",
        "7c00689Z",
        "7c00690",
        "7c00690A",
        "7c00690B",
        "7c00689C",
        "7c00637A",
        "7c00637B",
        "7c00671A",
    ],
    "7cWEST2": [
        "7c00515",
        "7c00516",
        "7c00517",
        "7c00518",
        "7c00519",
        "7c00520",
        "7c00521",
        "7c00522",
        "7c00523",
        "7c00524",
        "7c00525",
        "7c00526",
        "7c00527",
        "7c00528",
        "7c00529",
        "7c00530",
        "7c00531",
        "7c00532",
        "7c00533",
        "7c00534",
        "7c00535",
        "7c00536",
        "7c00537",
        "7c00538",
        "7c00539",
        "7c00540",
        "7c00541",
        "7c00542",
        "7c00543",
        "7c00544",
        "7c00545",
        "7c00546",
        "7c00547",
        "7c00548",
        "7c00549",
        "7c00550",
        "7c00551",
        "7c00552",
        "7c00553",
        "7c00554",
        "7c00555",
        "7c00556",
        "7c00565",
        "7c00575",
        "7c00582",
        "7c00591",
        "7c00592",
        "7c00593",
        "7c00594",
        "7c00595",
        "7c00596",
        "7c00597",
        "7c00598",
        "7c00599",
        "7c00600",
        "7c00601",
        "7c00602",
        "7c00603",
        "7c00604",
        "7c00605",
        "7c00606",
        "7c00607",
        "7c00608",
        "7c00609",
        "7c00610",
        "7c00610A",
        "7c00610B",
        "7c00610D",
        "7c00610E",
        "7c00610F",
        "7c00610C",
        "7c00508A",
        "7c00510A",
        "7c00511A",
        "7c00513A",
        "7c00506A",
        "7c00505A",
        "7c00504A",
        "7c00501A",
        "7c00500B",
        "7c00500A",
        "7c00498A",
        "7c00512A",
        "7c00507A",
        "7c00503A",
        "7c00499A",
    ],
    "7dBURN2": [
        "7d02114M",
        "7d02114N",
        "7d02114O",
        "7d02114P",
        "7d02114Q",
        "7d02114R",
        "7d02114S",
        "7d02114T",
        "7d02114U",
        "7d02114V",
        "7d02114W",
        "7d02114X",
        "7d02114Y",
        "7d02114Z",
        "7d02115",
        "7d02115A",
        "7d02115B",
        "7d02115C",
        "7d02115D",
        "7d02115E",
        "7d02115F",
        "7d02115G",
        "7d02115H",
        "7d02115I",
        "7d02115J",
        "7d02115K",
        "7d02115L",
        "7d02115M",
        "7d02115N",
        "7d02115O",
        "7d02115P",
        "7d02115Q",
        "7d02115R",
        "7d02115S",
        "7d02115T",
        "7d02115U",
        "7d02115V",
        "7d02115W",
        "7d02115X",
        "7d02115Y",
        "7d02115Z",
        "7d02157",
        "7d02158",
        "7d02159",
        "7d02160",
        "7d02161",
        "7d02162",
        "7d02163",
        "7d02164",
        "7d02165",
        "7d02166",
        "7d02167",
        "7d02168",
        "7d02169",
        "7d02170",
        "7d02171",
        "7d02172",
    ],
    "7dBURN3": [
        "7d02173",
        "7d02174",
        "7d02175",
        "7d02176",
        "7d02177",
        "7d02178",
        "7d02179",
        "7d02180",
        "7d02181",
        "7d02182",
        "7d02183",
        "7d02184",
        "7d02185",
        "7d02187",
        "7d02188",
        "7d02189",
        "7d02190",
        "7d02191",
        "7d02192",
        "7d02194",
        "7d02195",
        "7d02196",
        "7d02197",
        "7d02198",
        "7d02199",
        "7d02201",
        "7d02202",
        "7d02203",
        "7d02204",
        "7d02205",
        "7d02206",
        "7d02207",
        "7d02208",
        "7d02209",
        "7d02210",
        "7d02211",
        "7d02212",
        "7d02213",
        "7d02215",
        "7d02216",
        "7d02217",
        "7d02218",
        "7d02219",
        "7d02220",
        "7d02221",
        "7d02222",
        "7d02223",
        "7d02224",
        "7d02225",
        "7d02226",
        "7d02227",
        "7d02228",
        "7d02230",
        "7d02231",
        "7d02232",
        "7d02233",
        "7d02234",
        "7d02235",
        "7d02236",
        "7d02237",
        "7d02238",
        "7d02239",
        "7d02240",
        "7d02241",
        "7d02242",
        "7d02243",
        "7d02244",
        "7d02245",
        "7d02246",
        "7d02247",
        "7d02248",
        "7d02249",
        "7d02251",
        "7d02252",
        "7d02253",
        "7d02254",
        "7d02255",
        "7d02256",
        "7d02257",
        "7d02258",
        "7d02259",
        "7d02260",
        "7d02261",
        "7d02262",
        "7d02263",
        "7d02264",
        "7d02265",
        "7d02266",
        "7d02267",
        "7d02268",
        "7d02269",
        "7d02270",
        "7d02271",
        "7d02272",
        "7d02273",
        "7d02274",
        "7d02275",
        "7d02276",
        "7d02277",
        "7d02278",
        "7d02279",
        "7d02281",
        "7d02282",
        "7d02283",
        "7d02284",
        "7d02285",
        "7d02286",
        "7d02287",
        "7d02288",
        "7d02289",
        "7d02290",
        "7d02291",
        "7d02293",
        "7d02295",
        "7d02296",
        "7d02297",
        "7d02298",
    ],
    "7dBURN4-A": [
        "7d02299",
        "7d02300",
        "7d02301",
        "7d02302",
        "7d02303",
        "7d02304",
        "7d02305",
        "7d02306",
        "7d02307",
        "7d02308",
        "7d02309",
        "7d02310",
        "7d02311",
        "7d02312",
        "7d02313",
        "7d02314",
        "7d02315",
        "7d02316",
        "7d02317",
        "7d02318",
        "7d02319",
    ],
    "7dBURN4-B": [
        "7d02320",
        "7d02321",
        "7d02322",
        "7d02323",
        "7d02324",
        "7d02325",
        "7d02326",
        "7d02327",
        "7d02328",
        "7d02329",
        "7d02330",
        "7d02331",
        "7d02332",
        "7d02333",
        "7d02334",
        "7d02335",
        "7d02336",
        "7d02337",
        "7d02338",
        "7d02339",
        "7d02340",
        "7d02341",
        "7d02342",
        "7d02343",
        "7d02344",
        "7d02345",
        "7d02346",
        "7d02347",
        "7d02348",
        "7d02349",
        "7d02350",
        "7d02351",
    ],
    "7dLILS2": [
        "7d01796",
        "7d01797",
        "7d01798",
        "7d01799",
        "7d01800",
        "7d01801",
        "7d01802",
        "7d01803",
        "7d01804",
        "7d01805",
        "7d01806",
        "7d01807",
        "7d01808",
    ],
    "7dMINE1": [
        "7d01302",
        "7d01304",
        "7d01306",
        "7d01308",
        "7d01310",
        "7d01312",
        "7d01314",
        "7d01316",
        "7d01318",
        "7d01319A",
    ],
    "7dMINE2": [
        "7d01321",
        "7d01322",
        "7d01323",
        "7d01324",
        "7d01325",
        "7d01326",
        "7d01327",
        "7d01328",
        "7d01329",
        "7d01330",
        "7d01331",
        "7d01332",
        "7d01333",
        "7d01334",
        "7d01335",
        "7d01336",
        "7d01337",
        "7d01338",
        "7d01339",
        "7d01340",
        "7d01341",
        "7d01342",
        "7d01343",
        "7d01344",
        "7d01345",
        "7d01346",
        "7d01347",
        "7d01348",
        "7d01349",
        "7d01350",
        "7d01351",
        "7d01352",
        "7d01353",
        "7d01354",
        "7d01355",
        "7d01356",
        "7d01357",
        "7d01358",
        "7d01359",
        "7d01360",
        "7d01361",
        "7d01362",
    ],
    "7dMINE3": [
        "7d01363",
        "7d01364",
        "7d01365",
        "7d01366",
        "7d01367",
        "7d01368",
        "7d01369",
        "7d01370",
        "7d01371",
        "7d01372",
        "7d01373",
        "7d01374",
        "7d01375",
        "7d01376",
        "7d01377",
        "7d01378",
        "7d01379",
        "7d01380",
        "7d01381",
        "7d01382",
        "7d01383",
        "7d01384",
        "7d01385",
        "7d01386",
        "7d01387",
        "7d01388",
        "7d01389",
        "7d01390",
        "7d01391",
        "7d01392",
        "7d01393",
        "7d01394",
        "7d01395",
        "7d01396",
        "7d01397",
        "7d01398",
        "7d01399",
        "7d01400",
        "7d01401",
    ],
    "7dMINE4": [
        "7d01402",
        "7d01403",
        "7d01404",
        "7d01405",
        "7d01406",
        "7d01407",
        "7d01408",
        "7d01409",
        "7d01410",
        "7d01411",
        "7d01412",
        "7d01413",
        "7d01414",
        "7d01415",
        "7d01416",
        "7d01417",
        "7d01418",
        "7d01419",
        "7d01420",
        "7d01421",
        "7d01422",
        "7d01423",
        "7d01424",
        "7d01425",
        "7d01426",
        "7d01427",
    ],
    "7dMINE5": [
        "7d01428",
        "7d01429",
        "7d01430",
        "7d01431",
        "7d01432",
        "7d01433",
        "7d01434",
        "7d01435",
        "7d01436",
        "7d01437",
        "7d01438",
        "7d01439",
        "7d01440",
        "7d01441",
        "7d01442",
        "7d01443",
        "7d01444",
        "7d01445",
        "7d01446",
        "7d01447",
        "7d01448",
        "7d01449",
        "7d01450",
        "7d01451",
        "7d01452",
        "7d01453",
        "7d01454",
        "7d01455",
        "7d01456",
        "7d01457",
        "7d01458",
        "7d01459",
        "7d01460",
        "7d01461",
        "7d01462",
        "7d01463",
        "7d01464",
        "7d01465",
        "7d01466",
        "7d01467",
        "7d01468",
    ],
    "7dMINE6": [
        "7d01469",
        "7d01470",
        "7d01471",
        "7d01472",
        "7d01473",
        "7d01474",
        "7d01475",
        "7d01476",
        "7d01477",
        "7d01478",
        "7d01479",
        "7d01480",
        "7d01481",
        "7d01482",
        "7d01483",
        "7d01484",
        "7d01485",
        "7d01486",
        "7d01487",
        "7d01488",
        "7d01489",
        "7d01490",
        "7d01491",
        "7d01492",
        "7d01493",
    ],
    "7dPARR2": [
        "7d01906",
        "7d01907",
        "7d01908",
        "7d01909",
        "7d01910",
        "7d01911",
        "7d01912",
        "7d01913",
        "7d01914",
        "7d01915",
        "7d01916",
        "7d01917",
        "7d01918",
        "7d01919",
        "7d01920",
        "7d01921",
        "7d01922",
        "7d01923",
        "7d01924",
        "7d01925",
        "7d01926",
        "7d01927",
        "7d01928",
        "7d01929",
        "7d01930",
        "7d01931",
        "7d01932",
        "7d01933",
        "7d01934",
        "7d01935",
        "7d01936",
        "7d01937",
        "7d01938",
        "7d01939",
        "7d01940",
        "7d01941",
    ],
    "7dPARR3": [
        "7d01942",
        "7d01943",
        "7d01944",
        "7d01950",
        "7d01957",
        "7d01962",
        "7d01966",
        "7d01971",
        "7d01975",
        "7d01977",
        "7d01984",
        "7d01987",
        "7d01996",
        "7d02001A",
        "7d02007",
        "7d02012",
        "7d02020",
        "7d02027",
        "7d02032",
        "7d02036",
        "7d02041",
        "7d02045",
        "7d02050",
        "7d02052AA",
        "7d02058",
    ],
    "7dPORL1": [
        "7d01040",
        "7d01042",
        "7d01044",
        "7d01046",
        "7d01048",
        "7d01050",
        "7d01052",
        "7d01054",
        "7d01056",
        "7d01058",
    ],
    "7dPORL2": ["7d01062A", "7d01062B", "7d01062C", "7d01063A", "7d01066A"],
    "7dPORL3": [
        "7d01070",
        "7d01072",
        "7d01074",
        "7d01076",
        "7d01078",
        "7d01080",
        "7d01082",
        "7d01084",
        "7d01085",
        "7d01086",
        "7d01087",
        "7d01088",
        "7d01089",
        "7d01090",
        "7d01091",
        "7d01092",
        "7d01093",
        "7d01094",
        "7d01096",
        "7d01098",
        "7d01100",
        "7d01102",
        "7d01103",
        "7d01105",
        "7d01107",
        "7d01110",
        "7d01112",
        "7d01114",
        "7d01116",
        "7d01119",
        "7d01122",
        "7d01125",
        "7d01128",
        "7d01131",
        "7d01134",
        "7d01137",
        "7d01140",
        "7d01143",
        "7d01146",
        "7d01149",
    ],
    "7eSANB1": [
        "7e00176",
        "7e00177",
        "7e00178",
        "7e00179",
        "7e00180",
        "7e00181",
        "7e00182",
        "7e00183",
        "7e00184",
        "7e00185",
        "7e00186",
        "7e00187",
        "7e00188",
        "7e00189",
        "7e00190",
        "7e00191",
        "7e00192",
        "7e00193",
        "7e00194",
        "7e00195",
        "7e00196",
        "7e00197",
        "7e00198",
        "7e00199",
        "7e00200",
        "7e00201",
        "7e00202",
        "7e00203",
        "7e00204",
        "7e00205",
        "7e00206",
        "7e00207",
        "7e00208",
        "7e00209",
        "7e00210",
        "7e00211",
        "7e00212",
        "7e00213",
        "7e00214",
        "7e00215",
        "7e00216",
        "7e00217",
        "7e00218",
        "7e00219",
        "7e00220",
        "7e00221",
        "7e00222",
        "7e00223",
        "7e00224",
        "7e00225",
        "7e00226",
        "7e00227",
        "7e00228",
        "7e00229",
        "7e00230",
        "7e00231",
        "7e00232",
        "7e00233",
        "7e00234",
        "7e00235",
        "7e00236",
        "7e00237",
        "7e00238",
        "7e00239",
        "7e00240",
        "7e00241",
        "7e00242",
        "7e00243",
        "7e00244",
        "7e00245",
    ],
    "7eSU15-1": [
        "7e00896",
        "7e00897",
        "7e00898",
        "7e00899",
        "7e00900",
        "7e00901",
        "7e00902",
        "7e00903",
        "7e00904",
        "7e00905",
        "7e00906",
        "7e00907",
        "7e00908",
        "7e00909",
        "7e00920",
    ],
    "7eSU15-2": [
        "7e00830",
        "7e00833",
        "7e00836",
        "7e00839",
        "7e00843",
        "7e00845",
        "7e00847",
        "7e00849",
        "7e00852",
        "7e00854",
        "7e00857",
        "7e00860",
        "7e00864",
        "7e00868",
        "7e00870",
        "7e00872",
    ],
    "7eSU17-2": [
        "7e00650",
        "7e00651",
        "7e00652",
        "7e00653",
        "7e00654",
        "7e00655",
        "7e00656",
        "7e00657",
        "7e00658",
        "7e00659",
        "7e00660",
        "7e00661",
        "7e00662",
        "7e00663",
        "7e00664",
        "7e00665",
        "7e00666",
        "7e00667",
        "7e00668",
    ],
    "7eSU17-5": [
        "7e00470",
        "7e00471",
        "7e00472",
        "7e00473",
        "7e00474",
        "7e00475",
        "7e00476",
        "7e00477",
        "7e00478",
        "7e00479",
        "7e00480",
        "7e00481",
        "7e00482",
        "7e00483",
        "7e00484",
        "7e00485",
        "7e00486",
        "7e00489",
        "7e00490",
        "7e00491",
        "7e00492",
    ],
    "7eWSM1": [
        "7e00047",
        "7e00048",
        "7e00049",
        "7e00050",
        "7e00051",
        "7e00052",
        "7e00053",
        "7e00054",
        "7e00055",
        "7e00056",
        "7e00057",
        "7e00058",
        "7e00059",
        "7e00060",
        "7e00061",
        "7e00062",
        "7e00063",
        "7e00064",
        "7e00065",
        "7e00066",
        "7e00067",
        "7e00068",
        "7e00069",
        "7e00070",
        "7e00071",
        "7e00072",
        "7e00073",
        "7e00074",
        "7e00075",
        "7e00076",
        "7e00077",
        "7e00078",
        "7e00079",
        "7e00080",
    ],
    "7eWSM2": [
        "7e00081",
        "7e00082",
        "7e00083",
        "7e00084",
        "7e00085",
        "7e00086",
        "7e00087",
        "7e00088",
        "7e00089",
        "7e00090",
        "7e00091",
        "7e00092",
        "7e00093",
        "7e00094",
        "7e00095",
        "7e00096",
        "7e00097",
        "7e00098",
        "7e00099",
        "7e00100",
        "7e00101",
        "7e00102",
        "7e00103",
        "7e00104",
        "7e00105",
        "7e00106",
        "7e00107",
        "7e00108",
        "7e00109",
        "7e00110",
        "7e00111",
        "7e00112",
        "7e00113",
        "7e00114",
        "7e00115",
        "7e00116",
        "7e00117",
        "7e00118",
        "7e00119",
        "7e00120",
        "7e00121",
        "7e00122",
        "7e00123",
        "7e00124",
    ],
}

INITIAL_LOAD_SURVEY_UNIT = '6aSU12'
INITIAL_LOAD_PROFILE_LINE = '6a01624'

# These are the interims for the INITIAL_LOAD_PROFILE_LINE
INITIAL_LOAD_PROFILE_OPTIONS = [{'label': "6a01613", 'value': "6a01613"},
                                {'label': "6a01615", 'value': "6a01615"},
                                {'label': "6a01618", 'value': "6a01618"},
                                {'label': "6a01621", 'value': "6a01621"},
                                {'label': "6a01624", 'value': "6a01624"}]


DEFAULT_MAP_CENTER = {"lat": 50.698646242436496, "lon":-4.096976854933279}

# Define the basemap options
BASEMAPS = [
    {'label': 'OpenStreetMap', 'value': 'open-street-map'},
    {'label': 'Satellite', 'value': 'satellite-streets'},
    # Add more basemap options as needed
]


def haversine(lat1, lon1, lat2, lon2):
    # Radius of the Earth in meters
    R = 6371000.0

    # Convert latitude and longitude from degrees to radians
    lat1, lon1, lat2, lon2 = map(radians, [lat1, lon1, lat2, lon2])

    # Haversine formula
    dlat = lat2 - lat1
    dlon = lon2 - lon1

    a = sin(dlat / 2)**2 + cos(lat1) * cos(lat2) * sin(dlon / 2)**2
    c = 2 * atan2(sqrt(a), sqrt(1 - a))

    distance = R * c
    return distance


def establish_connection(retries=3, delay=5):
    """Function attempts to connect to the database. It will retry 3 times before giving up"""

    attempts = 0
    while attempts < retries:
        try:
            # Attempt to create an engine and connect to the database
            engine = create_engine(
                "postgresql://postgres:Plymouth_C0@swcm-dashboard.crh7kxty9yzh.eu-west-2.rds.amazonaws.com:5432/postgres"
            )
            conn = engine.connect()

            # If the connection is successful, return the connection object
            return conn

        except OperationalError as e:
            # Handle the case where a connection cannot be established
            print(f"Error connecting to the database: {e}")
            attempts += 1

            if attempts < retries:
                print(f"Retrying in {delay} seconds...")
                time.sleep(delay)
            else:
                print("Max retry attempts reached. Giving up.")
                # Optionally, you can raise an exception, log the error, or take other appropriate actions

    return None  # Return None if all attempts fail

fig = go.Figure()
fig.update_layout(

        #height=850

      ),


image_path = r"media/Percent.jpg"
with open(image_path, "rb") as image_file:
    encoded_image = base64.b64encode(image_file.read()).decode()

layout = html.Div(
    children=[


        html.Div(

            [

                dcc.Graph(
                    id="example-map",
                    # Include your figure here
                     figure=fig,
                    config={'modeBarButtonsToRemove': ['lasso2d'], 'displaylogo': False, 'responsive':True},
                    className="map",
                    style={'position': 'relative','width': '100%', 'height': '60vh',}

                ),

            ],
            style={'position': 'relative'}
        ),

        html.Div(children=[
            html.Div([

                dcc.Dropdown(
                    id='basemap-dropdown',
                    options=BASEMAPS,
                    value=None, # Set the initial value
                    style={'font-size':13,
                           'position':'relative',
                           'border-radius': '10px', 'box-shadow': "5px 5px 5px lightblue",
                           'width': '170px',
                           'height': '30px',

                           # Adjust padding left
                           },
                    placeholder= 'Select Basemap',
                    clearable=False


                ),

            ], style={
                    'position': 'absolute',
                    'top': 60,
                    'left': 13,
                    'width': '171px',
                    'height': '35px',
                    'zIndex': 100,





                }),

            html.Img(
                src=f"data:image/jpeg;base64,{encoded_image}",
                style={
                    'position': 'absolute',
                    'bottom': 10,
                    'left': 10,
                    'width': '300px',
                    'height': '120px',
                    'zIndex': 100,
                    'border-radius': 10,
                    'border-weight': 10,
                    "border-color": "black",
                    'border': '1px solid grey',
                    'box-shadow': "5px 5px 5px lightblue"
                }
            ),

            dcc.RadioItems(
                id='change_range_radio_button',
                options=[
                    {'label': '  Baseline to Spring PCT', 'value': 'base-spr'},
                    {'label': '  Spring to Spring PCT', 'value': 'spr-spr'}
                ],
                value='base-spr',  # Default selected option
                style={
                    'position': 'absolute',
                    'top': '10px',  # Adjust as needed
                    'left': '10px',  # Adjust as needed
                    'width': '180px',
                    'height': '45px',
                    'zIndex': 100,
                    'border-radius': 15,

                    #'border': '1px solid grey',
                    'box-shadow': "5px 5px 5px lightblue",
                    'paddingTop': '5px',  # Adjust padding top
                    'paddingRight': '5px',  # Adjust padding right
                    'paddingBottom': '8px',  # Adjust padding bottom
                    'paddingLeft': '8px',  # Adjust padding left

                    'fontSize': 13
                }
            ),

        ]),

        dcc.Store(id='map-state', data={'center': None}),
        dcc.Store(
            id="selected-value-storage",
            data={"survey_unit": '6aSU12', "profile_line": '6a01613', 'multi': False, 'box_selected_data': None,
                  'survey_type': 'Interim', },
        ),
        dcc.Store(id='multi-select-lines'),  # Holds the percent change for each sur unit as a df
        dcc.Store(id= 'survey-points-change-values', data=None),
        dcc.Location(id="url", refresh=False), # Add a Location component
        html.Div(id='verification-output')

    ],
    id="mapbox_div",
    style={'position': 'relative','width': '100%', 'height': '100%', }
)



@callback(Output('selected-value-storage', 'data'),
          Output("survey-line-dropdown", "options"),
          Output("survey-unit-dropdown", "value"),
          Output("survey-line-dropdown", "value"),
          Output("example-map", "clickData"),
          Output("survey-type-dropdown", "value"),

          Input('example-map', 'clickData'),
          Input('example-map', 'selectedData'),
          Input("survey-unit-dropdown", "value"),  # dropdown value of the line dropdown
          Input("survey-line-dropdown", "value"),
          Input('selected-value-storage', 'data'),

          Input("survey-type-dropdown", "value"),

         )
def update_output(click_data, box_selected_data, sur_unit_dropdown_val: str, prof_line_dropdown_val: str,
                  selected_val_storage, survey_type_dropdown_vals ):
    """
    Update the output based on user interactions. Main function that controls the logic of user inputs and how the
    app changes and updates charts.

    Parameters:
        click_data (dict): Click data from the 'example-map' component.
        box_selected_data (dict): Selected data from the 'example-map' component using box selection.
        sur_unit_dropdown_val (str): Value selected in the 'survey-unit-dropdown'.
        prof_line_dropdown_val (str): Value selected in the 'survey-line-dropdown'.
        selected_val_storage (dict): Previously selected values stored in 'selected-value-storage'.

    Returns:
        Tuple[dict, List[dict], str, str, dict]: A tuple containing the following:
            - A dictionary representing the selected values and metadata.
            - A list of profile line options for the 'survey-line-dropdown'.
            - The selected value in 'survey-unit-dropdown'.
            - The selected value in 'survey-line-dropdown'.
            - Click data from the 'example-map'.
    """

    ctx = dash.callback_context
    ctx_id = dash.callback_context.triggered_id


    def get_box_selected_data():

        """Function returns if user has used box selection in the map. When box select is used 'selectedData'
           prop from the map becomes populated. Note this is different from when a mouse click is used clickData'.
           If box select used, returns list of box coordinates, else returns None

           box_selected_data -> 'example-map', 'selectedData'

           return -> None or 'selected_data' box coordinates as list

           """

        if box_selected_data:

            if 'range' in box_selected_data.keys():
                current_box = box_selected_data['range']['mapbox']
            else:
                current_box = None
        else:
            current_box = None

        return current_box

    cal_box_selected_data = get_box_selected_data()

    def value_storage_check():

        """Function checks if 'selected_value_storage' dcc.store exists. If it does checks if it is a list. By default
           it should always be. If 'selected_val_storage' is not a list, it directly assigns it to fixed_val_storage"""

        if selected_val_storage:

            # convert to a dict if not:
            if isinstance(selected_val_storage, list):
                fixed_val_storage = selected_val_storage[0]
            else:
                fixed_val_storage = selected_val_storage

        else:
            fixed_val_storage = None

        return fixed_val_storage

    checked_val_storage = value_storage_check()

    def compare_val_storage_box_data_to_map_selected_data():

        """Function determines if box select was used, and also if it is different from the previous box selection.
           This is needed as any previous box select data is stored in the dcc.store 'selected_val_storage' and
           by checking if the new and old values are different tells the app if a new box select is used."""

        if checked_val_storage['box_selected_data'] is not None:
            if checked_val_storage['box_selected_data'] == cal_box_selected_data:
                val_storage_box_select_data_same = True
            else:
                val_storage_box_select_data_same = False
        else:
            val_storage_box_select_data_same = True

        return val_storage_box_select_data_same

    multi_same_check = compare_val_storage_box_data_to_map_selected_data()

    # handle if nothing selected, the initial load will run this block:
    if ctx_id not in ['example-map', 'survey-line-dropdown', 'survey-unit-dropdown',
                      'survey-type-dropdown'] or ctx_id is None:

        selected_value_result = {"survey_unit": INITIAL_LOAD_SURVEY_UNIT, "profile_line": INITIAL_LOAD_PROFILE_LINE,
                                 'multi': False, 'box_selected_data': None, 'survey_type': 'Interim', },

        return selected_value_result, INITIAL_LOAD_PROFILE_OPTIONS, INITIAL_LOAD_SURVEY_UNIT, INITIAL_LOAD_PROFILE_LINE, None, 'Interim'

    # survey_unit_dropdown was used set the survey unit, the profile line options and the first line option as the val:
    elif ctx.triggered_id == 'survey-unit-dropdown':
        def get_new_profile_options():

            """Function creates new profile dropdown options based on the survey type selected"""

            # If one survey type is selected a str is returned not a list, check for this and convert to a list
            if isinstance(survey_type_dropdown_vals, str):
                set_survey_types = [survey_type_dropdown_vals]

            selected_columns = ['Interim', 'Post Storm', 'Baseline']
            user_selection = survey_type_dropdown_vals

            if len(survey_type_dropdown_vals) == 1:
                formatted_survey_type = survey_type_dropdown_vals[0].lower().replace(' ', '_')

                sql_query = f"SELECT * FROM sw_profiles WHERE surveyunit  = '{sur_unit_dropdown_val}' AND  {formatted_survey_type} = 'YES'"

            else:
                # Create a default SQL query string
                base_sql_query = f"SELECT * FROM sw_profiles WHERE surveyunit  = '{sur_unit_dropdown_val}' AND "

                # Build the WHERE clause dynamically based on user selection
                conditions = []
                for column in selected_columns:
                    if column in user_selection:
                        conditions.append(f"{column.lower().replace(' ', '_')} = 'YES'")

                # Join the conditions using AND
                base_sql_query += " AND ".join(conditions)
                sql_query = base_sql_query

            # CUSTOM FILTER FOR SURVEY UNIT PORL3 NO INTERIMS
            if sur_unit_dropdown_val == "7dPORL3":
                sql_query = f"SELECT * FROM sw_profiles WHERE surveyunit  = '{sur_unit_dropdown_val}'"


            query_profile_lines = sql_query

            conn = establish_connection()

            lines_gdf = gpd.GeoDataFrame.from_postgis(
                query_profile_lines, conn, geom_col="wkb_geometry"
            )

            # Some sites don't have interims, so if no data is returned grab all profiles instead?


            profile_line_options = []

            for _, row in lines_gdf.iterrows():
                option_dict = {}
                profile = row['profname']
                option_dict.update({'label': profile, 'value': profile})
                profile_line_options.append(option_dict)

            return profile_line_options

        cal_profile_line_options = get_new_profile_options()
        profile_line_value = cal_profile_line_options[0].get('value')

        selected_value_result = {"survey_unit": sur_unit_dropdown_val,
                                 "profile_line": profile_line_value,
                                 'multi': False,
                                 'box_selected_data': None,
                                 'survey_type': survey_type_dropdown_vals
                                 },

        return selected_value_result, cal_profile_line_options, sur_unit_dropdown_val, profile_line_value, None, dash.no_update

    elif ctx.triggered_id == 'survey-line-dropdown':
        # survey_line_dropdown used set ONLY the profile line, the options won't change so no update
        selected_value_result = {"survey_unit": sur_unit_dropdown_val,
                                 "profile_line": prof_line_dropdown_val,
                                 'multi': False,
                                 'box_selected_data': None,
                                 'survey_type': survey_type_dropdown_vals},

        return selected_value_result, dash.no_update, dash.no_update, prof_line_dropdown_val, None, dash.no_update

    elif ctx.triggered_id == 'survey-type-dropdown':

        # need to filter the dropdown options for only profiles that meet the survey type:
        def get_new_profile_options():

            """Function creates new profile dropdown options based on the survey type selected"""

            # If one survey type is selected a str is returned not a list, check for this and convert to a list
            if isinstance(survey_type_dropdown_vals, str):
                set_survey_types = [survey_type_dropdown_vals]

            selected_columns = ['Interim', 'Post Storm', 'Baseline']
            user_selection = survey_type_dropdown_vals

            # all baselines are both interims and can be poststorms (every profile)
            if len(survey_type_dropdown_vals) == 1:
                formatted_survey_type = survey_type_dropdown_vals[0].lower().replace(' ', '_')

                sql_query = f"SELECT * FROM sw_profiles WHERE surveyunit  = '{sur_unit_dropdown_val}' AND  {formatted_survey_type} = 'YES'"

            else:
                # Create a default SQL query string
                base_sql_query = f"SELECT * FROM sw_profiles WHERE surveyunit  = '{sur_unit_dropdown_val}' AND "

                # Build the WHERE clause dynamically based on user selection
                conditions = []
                for column in selected_columns:
                    if column in user_selection:
                        conditions.append(f"{column.lower().replace(' ', '_')} = 'YES'")

                # Join the conditions using AND
                base_sql_query += " AND ".join(conditions)
                sql_query = base_sql_query

            # CUSTOM FILTER FOR SURVEY UNIT PORL3 NO INTERIMS
            if sur_unit_dropdown_val == "7dPORL3":
                sql_query = f"SELECT * FROM sw_profiles WHERE surveyunit  = '{sur_unit_dropdown_val}'"
            query_profile_lines = sql_query

            conn = establish_connection()

            lines_gdf = gpd.GeoDataFrame.from_postgis(
                query_profile_lines, conn, geom_col="wkb_geometry"
            )

            profile_line_options = []

            for _, row in lines_gdf.iterrows():
                option_dict = {}
                profile = row['profname']
                option_dict.update({'label': profile, 'value': profile})
                profile_line_options.append(option_dict)

            return profile_line_options

        # set the profile selected to the first in the new calulated options

        cal_profile_line_options = get_new_profile_options()
        profile_line_value = cal_profile_line_options[0].get('value')

        # survey_line_dropdown used set ONLY the profile line, the options won't change so no update
        selected_value_result = {"survey_unit": sur_unit_dropdown_val,
                                 "profile_line": profile_line_value,
                                 'multi': False,
                                 'box_selected_data': None,
                                 'survey_type': survey_type_dropdown_vals},

        return selected_value_result, cal_profile_line_options, dash.no_update, profile_line_value, None, survey_type_dropdown_vals

    elif ctx.triggered_id == 'example-map' and multi_same_check == True:

        if click_data is not None:

            # Line data has the key hovertext in the clickdata, points have customdata
            if "Profile Line ID" in click_data['points'][0]['hovertext']:
                line = True
            else:
                line = False

            # if the points (survey units) were clicked:
            if not line:

                clicked_survey_unit = click_data.get("points", [])[0].get("customdata")[0]

                def get_new_profile_options():

                    """Function creates new profile dropdown options based on the survey type selected"""

                    # If one survey type is selected a str is returned not a list, check for this and convert to a list
                    if isinstance(survey_type_dropdown_vals, str):
                        set_survey_types = [survey_type_dropdown_vals]

                    selected_columns = ['Interim', 'Post Storm', 'Baseline']
                    user_selection = survey_type_dropdown_vals

                    # all baselines are both interims and can be poststorms (every profile)
                    if len(survey_type_dropdown_vals) == 1:
                        formatted_survey_type = survey_type_dropdown_vals[0].lower().replace(' ', '_')

                        sql_query = f"SELECT * FROM sw_profiles WHERE surveyunit  = '{clicked_survey_unit}' AND  {formatted_survey_type} = 'YES'"

                    else:
                        # Create a default SQL query string
                        base_sql_query = f"SELECT * FROM sw_profiles WHERE surveyunit  = '{clicked_survey_unit}' AND "

                        # Build the WHERE clause dynamically based on user selection
                        conditions = []
                        for column in selected_columns:
                            if column in user_selection:
                                conditions.append(f"{column.lower().replace(' ', '_')} = 'YES'")

                        # Join the conditions using AND
                        base_sql_query += " AND ".join(conditions)
                        sql_query = base_sql_query


                    # CUSTOM FILTER FOR SURVEY UNIT PORL3 NO INTERIMS
                    if clicked_survey_unit == "7dPORL3":
                        sql_query = f"SELECT * FROM sw_profiles WHERE surveyunit  = '{clicked_survey_unit}'"

                    query_profile_lines = sql_query

                    conn = establish_connection()

                    lines_gdf = gpd.GeoDataFrame.from_postgis(
                        query_profile_lines, conn, geom_col="wkb_geometry"
                    )

                    profile_line_options = []

                    for _, row in lines_gdf.iterrows():
                        option_dict = {}
                        profile = row['profname']
                        option_dict.update({'label': profile, 'value': profile})
                        profile_line_options.append(option_dict)

                    return profile_line_options

                # set the profile selected to the first in the new calulated options

                cal_profile_line_options = get_new_profile_options()
                profile_line_value = cal_profile_line_options[0].get('value')

                selected_value_result = ({"survey_unit": clicked_survey_unit,
                                          "profile_line": profile_line_value,
                                          'multi': False,
                                          'box_selected_data': None,
                                          'survey_type': survey_type_dropdown_vals}

                                         , cal_profile_line_options)

                return selected_value_result, cal_profile_line_options, clicked_survey_unit, \
                profile_line_value, None, dash.no_update

            # if the lines (profile lines) were clicked:
            elif line:
                clicked_profile_line = click_data.get("points", [])[0].get("hovertext").split('<br>')[0].split(':')[
                    1].replace(" ", "")

                #prof_line_dropdown_options = unit_to_options.get(sur_unit_dropdown_val, [])

                def get_new_profile_options():

                    """Function creates new profile dropdown options based on the survey type selected"""

                    # If one survey type is selected a str is returned not a list, check for this and convert to a list
                    if isinstance(survey_type_dropdown_vals, str):
                        set_survey_types = [survey_type_dropdown_vals]

                    selected_columns = ['Interim', 'Post Storm', 'Baseline']
                    user_selection = survey_type_dropdown_vals

                    # all baselines are both interims and can be poststorms (every profile)
                    if len(survey_type_dropdown_vals) == 1:
                        formatted_survey_type = survey_type_dropdown_vals[0].lower().replace(' ', '_')

                        sql_query = f"SELECT * FROM sw_profiles WHERE surveyunit  = '{sur_unit_dropdown_val}' AND  {formatted_survey_type} = 'YES'"

                    else:
                        # Create a default SQL query string
                        base_sql_query = f"SELECT * FROM sw_profiles WHERE surveyunit  = '{sur_unit_dropdown_val}' AND "

                        # Build the WHERE clause dynamically based on user selection
                        conditions = []
                        for column in selected_columns:
                            if column in user_selection:
                                conditions.append(f"{column.lower().replace(' ', '_')} = 'YES'")

                        # Join the conditions using AND
                        base_sql_query += " AND ".join(conditions)
                        sql_query = base_sql_query

                     # CUSTOM FILTER FOR SURVEY UNIT PORL3 NO INTERIMS
                    if sur_unit_dropdown_val == "7dPORL3":
                         sql_query = f"SELECT * FROM sw_profiles WHERE surveyunit  = '{sur_unit_dropdown_val}'"
                    query_profile_lines = sql_query

                    conn = establish_connection()

                    lines_gdf = gpd.GeoDataFrame.from_postgis(
                        query_profile_lines, conn, geom_col="wkb_geometry"
                    )

                    profile_line_options = []

                    for _, row in lines_gdf.iterrows():
                        option_dict = {}
                        profile = row['profname']
                        option_dict.update({'label': profile, 'value': profile})
                        profile_line_options.append(option_dict)

                    return profile_line_options

                # set the profile selected to the first in the new calulated options

                cal_profile_line_options = get_new_profile_options()

                selected_value_result = {"survey_unit": sur_unit_dropdown_val,
                                         "profile_line": clicked_profile_line,
                                         'multi': False,
                                         'box_selected_data': None,
                                         'survey_type': survey_type_dropdown_vals}

                return selected_value_result, cal_profile_line_options, dash.no_update, clicked_profile_line, None, dash.no_update

        else:

            if box_selected_data is not None and 'range' in box_selected_data.keys():

                selected_value_result = {
                    "survey_unit": sur_unit_dropdown_val,
                    "profile_line": prof_line_dropdown_val,
                    'multi': True,
                    'box_selected_data': box_selected_data['range']['mapbox'],
                    'survey_type': survey_type_dropdown_vals
                }

                return selected_value_result, dash.no_update, dash.no_update, prof_line_dropdown_val, None, dash.no_update

            else:
                return dash.no_update, dash.no_update, sur_unit_dropdown_val, prof_line_dropdown_val, None, dash.no_update
    else:

        if box_selected_data is not None and 'range' in box_selected_data.keys():

            selected_value_result = {
                "survey_unit": sur_unit_dropdown_val,
                "profile_line": prof_line_dropdown_val,
                'multi': True,
                'box_selected_data': box_selected_data['range']['mapbox'],
                'survey_type': survey_type_dropdown_vals
            }

            return selected_value_result, dash.no_update, dash.no_update, prof_line_dropdown_val, None, dash.no_update

        else:
            return dash.no_update, dash.no_update, sur_unit_dropdown_val, prof_line_dropdown_val, None, dash.no_update


@callback(
    Output("example-map", "figure"),
    Output('multi-select-lines', 'data'),  # holds if multi select the line ids
    Output("test_loader", "loading_state"),
    Output('map-state', 'data'),
    Output('survey-points-change-values', 'data'),

    Input("selected-value-storage", "data"),
    Input('map-state', "data"),
    State('example-map', "relayoutData"),
    Input('csa_profile_line_colors', 'data'), # this is the colors mapped to profile.
    Input('change_range_radio_button', 'value'),
    Input('basemap-dropdown', 'value'),
    prevent_initial_call=False,
)
def update_map(current_selected_sur_and_prof: dict, map_state, map_relayout_data, csa_profile_line_colors, change_range_radio_button, basemap_selection):
    """Function controls the re-loading of the map. Takes in the value store which contains two values, selected survey
    unit and the selected profile line. It then highlights the selected survey unit, zooms to it and renders the
    relevant profile lines. The selected profile line is then used isolate and style to show which one is selected
    to the user."""

    # print(current_selected_sur_and_prof)

    # print(current_selected_sur_and_prof)
    if isinstance(current_selected_sur_and_prof, list):
        current_selected_sur_and_prof = current_selected_sur_and_prof[0]

    set_survey_unit = current_selected_sur_and_prof.get('survey_unit')
    set_profile_line = current_selected_sur_and_prof["profile_line"]
    set_survey_types = current_selected_sur_and_prof["survey_type"]

    # Get the proforma text from the database
    conn = establish_connection()

    # Import point (survey unit) spatial data as GeoDataFrame
    query = "SELECT * FROM new_survey_units"  # Modify this query according to your table
    gdf = gpd.GeoDataFrame.from_postgis(query, conn, geom_col="wkb_geometry")

    # change crs to supported crs
    gdf = gdf.to_crs(epsg=4326)

    # Extract latitude and longitude from the geometry column
    gdf["lat"] = gdf["wkb_geometry"].y
    gdf["long"] = gdf["wkb_geometry"].x
    gdf["size"] = 15

    query = f"SELECT * FROM cpa_table"  # Modify this query according to your table
    cpa_df = pd.read_sql_query(query, conn)
    cpa_df['date'] = pd.to_datetime(cpa_df['date'])

    def calculate_difference(group):

        master_df = group[["date", "profile", "area"]]

        pivot_df = master_df.pivot(index="profile", columns="date", values="area")
        pivot_df["Mean"] = pivot_df.mean(axis=1)

        pivot_df["countSurveyedDates"] = (len(pivot_df.columns) - 1) / 2
        pivot_df["NaNCount"] = pivot_df.isnull().sum(axis=1)
        pivot_df["DropRow"] = pivot_df["countSurveyedDates"] > pivot_df["NaNCount"]

        df1 = pivot_df.loc[pivot_df["DropRow"] == True]
        df1 = df1.drop(["NaNCount", "DropRow", "countSurveyedDates", "Mean"], axis=1)
        df1 = df1.T.fillna(df1.mean(axis=1)).T

        df1.loc["Sum"] = df1.sum()
        df1 = df1.tail(1)

        # logic to calculate the difference based on change_range_radio_button selection

        if change_range_radio_button  == "base-spr":


            first_column_value = df1.iloc[0, 0]
            last_column_index = df1.shape[1] - 1
            last_column_value = df1.iloc[0, last_column_index]

            df1["first"] = first_column_value
            df1["last"] = last_column_value

            df1["difference"] = ((df1["last"] - df1["first"]) / df1["first"]) * 100
            df1 = df1[["difference"]]

        if change_range_radio_button == "spr-spr":
            import datetime
            spring_months =[1,2,3,4,5,6]
            #df1 = df1.apply(pd.to_datetime, unit='s')
            # Extract month from each datetime column
            spring_month_columns = []
            for column in df1.columns:
                    dt_object = datetime.datetime.strptime(str(column), '%Y-%m-%d %H:%M:%S')
                    month = dt_object.month
                    if month in spring_months:
                        spring_month_columns.append(column)

            if len(spring_month_columns)>=2:
                first_column_value = list(df1[spring_month_columns[-2]])[0]
                last_column_value =list(df1[spring_month_columns[-1]])[0]
                df1["first"] = first_column_value
                df1["last"] = last_column_value
                df1["difference"] = ((df1["last"] - df1["first"]) / df1["first"]) * 100
                df1 = df1[["difference"]]
            else:
                df1["difference"] = 0
                df1 = df1[["difference"]]



        df1["Survey_Unit"] = group.name
        df1 = df1.reset_index()
        df1 = df1.set_index("Survey_Unit")

        return df1

    # Use groupby and apply the function to each group
    cpa_dfs = cpa_df.groupby("survey_unit").apply(calculate_difference).reset_index()
    cpa_dfs = cpa_dfs[['survey_unit', 'difference']]

    # set all na values, they shouldn't exist when all the correct data is loaded in
    data_check = cpa_dfs['difference'].isna().any()
    if data_check:
        print('error calculating difference')
    all_cpa_dfs = cpa_dfs.fillna(0)

    # Add a new column 'classification' based on multiple conditional statements based on pct change values
    all_cpa_dfs['classification'] = 'Default Value'
    all_cpa_dfs['classification'] = all_cpa_dfs['classification'].astype(str)

    # Define the conditions and corresponding values for classification, using numpy for speed
    conditions = [
        (all_cpa_dfs['difference'] <= -30),
        ((all_cpa_dfs['difference'] >= -30) & (all_cpa_dfs['difference'] <= -15)),
        ((all_cpa_dfs['difference'] >= -15) & (all_cpa_dfs['difference'] <= -5)),
        ((all_cpa_dfs['difference'] >= -5) & (all_cpa_dfs['difference'] <= 5)),
        ((all_cpa_dfs['difference'] >= 5) & (all_cpa_dfs['difference'] <= 15)),
        ((all_cpa_dfs['difference'] >= 15) & (all_cpa_dfs['difference'] <= 30)),
        (all_cpa_dfs['difference'] > 30)
    ]
    values = [
        'High Erosion',
        'Mild Erosion',
        'Low Erosion',
        'No Change',
        'Low Accretion',
        'Mild Accretion',
        'High Accretion'
    ]

    # Use numpy.select to assign values based on conditions
    all_cpa_dfs['classification'] = np.select(conditions, values, default='Default Value')

    all_cpa_dfs = all_cpa_dfs.reset_index()

    # merge pivot cpa values table to the survey unit table
    gdf = pd.merge(gdf, all_cpa_dfs[['survey_unit', 'classification', 'difference']], left_on='sur_unit',
                   right_on='survey_unit')

    # Store selected survey unit percent change value as a df, use this in main dash page to display change rate.
    survey_points_change_values = gdf.loc[gdf['survey_unit'] == set_survey_unit].to_json()

    # set the selected survey unit classification to Selected Unit.
    #gdf.loc[gdf['survey_unit'] == set_survey_unit, 'classification'] = 'Selected Unit'
    updated_gdf = gdf.copy()

    # Extract the coordinates of the selected survey unit
    selected_point = updated_gdf.loc[updated_gdf["sur_unit"] == set_survey_unit].iloc[0]
    center_lat = selected_point["lat"]
    center_lon = selected_point["long"]

    # To set the size of the survey unit points sqrt the difference(pct) values to close the range
    updated_gdf['sqrt_size'] = np.sqrt(updated_gdf['difference'].abs())
    updated_gdf['sqrt_size'] = np.sqrt(updated_gdf['sqrt_size'] * 4)  # adjust this to make points larger overall

    # Sort the values by difference to order the legend items (legend is turned off in for now)
    updated_gdf = updated_gdf.sort_values('difference')

    # Define a color mapping dictionary for each classification
    color_mapping = {
        'High Erosion': "#ff0000",
        'Mild Erosion': "#ff6666",
        'Low Erosion': "#ff9999",
        'No Change': "#4f4f54",
        'Low Accretion': "#00ace6",
        'Mild Accretion': "rgb(0, 103, 230)",
        'High Accretion': "rgb(0, 57, 128)",
        'Selected Unit': "#ffff05"
    }

    # Make the map, added to fig object later
    updated_scatter_trace = px.scatter_mapbox(
        updated_gdf,
        lat="lat",
        lon="long",
        hover_name="sur_unit",
        hover_data=["sur_unit"],
        custom_data=['sur_unit', 'classification', 'name'],
        color='classification',  # Use the 'classification' column for classifier to use
        color_discrete_map=color_mapping,  # use color map to set the colors
        center={
            "lat": center_lat,
            "lon": center_lon,
        },
        zoom=25,
        size="sqrt_size",  # set the size based off sqrt column
        size_max=25,
    )

    # Format the label shown, must have the <extra></extra> to remove the color being shown
    updated_scatter_trace.update_traces(hovertemplate="<b>%{customdata[0]}<br>" + "<b>%{customdata[2]}<br>"
                                                      + "%{customdata[1]}" + "<extra></extra>")

    # Adding the halo, a larger marker with transparency of the selected survey unit. Added to Fig as a trace later
    selected_survey_point = updated_gdf.loc[updated_gdf['survey_unit'] == set_survey_unit]

    selected_survey_unit_trace = go.Scattermapbox(
        lat=selected_survey_point["lat"],
        lon=selected_survey_point["long"],
        hovertext=selected_survey_point["sur_unit"],
        hoverinfo="none", # turn off hover data
        marker=dict(
            color='#ffff05',
            size=selected_survey_point["sqrt_size"],
            sizemode='area',
            sizeref=1.0 * max(updated_gdf["sqrt_size"]) / (25 ** 2),  # make larger
            sizemin=20,
            opacity=1.0
        ),
        mode='markers',
    )

    # Logic to set the SQL query to account for user selected survey type
    # If one survey type is selected a str is returned not a list, check for this and convert to a list
    if isinstance(set_survey_types, str):
        set_survey_types = [set_survey_types]

    selected_columns = ['Interim', 'Post Storm', 'Baseline']
    user_selection = set_survey_types

    if len(set_survey_types) == 1:
        formatted_survey_type = set_survey_types[0].lower().replace(' ', '_')

        sql_query = f"SELECT * FROM sw_profiles WHERE surveyunit  = '{set_survey_unit}' AND  {formatted_survey_type} = 'YES'"

    else:
        # Create a default SQL query string
        base_sql_query = f"SELECT * FROM sw_profiles WHERE surveyunit  = '{set_survey_unit}' AND "

        # Build the WHERE clause dynamically based on user selection
        conditions = []
        for column in selected_columns:
            if column in user_selection:
                conditions.append(f"{column.lower().replace(' ', '_')} = 'YES'")

        # Join the conditions using AND
        base_sql_query += " AND ".join(conditions)
        sql_query = base_sql_query


    # query_profile_lines = f"SELECT * FROM sw_profiles WHERE surveyunit  = '{set_survey_unit}'"
    query_profile_lines = sql_query


    # ONE OFF LOGIC FOR PORL3 WHICH HAS NO ITERIMS
    if set_survey_unit == "7dPORL3":
        sql_query = f"SELECT * FROM sw_profiles WHERE surveyunit  = '{set_survey_unit}'"
        query_profile_lines = sql_query

    lines_gdf = gpd.GeoDataFrame.from_postgis(
        query_profile_lines, conn, geom_col="wkb_geometry"
    )

    lines_gdf = lines_gdf.to_crs(epsg=4326)
    lines_gdf["type"] = "line"

    # Extract individual WKT strings and create LineString geometries and get selected fields for popup
    line_data = gpd.GeoDataFrame(
        {'profile': lines_gdf['regional_n'],
         "baseline": lines_gdf['baseline'],
         "interim": lines_gdf['interim'],
         "post_storm": lines_gdf['post_storm'],
         "strategy": lines_gdf['strategy'],
         "survey_unit": lines_gdf['surveyunit'],
         "geometry": [loads(wkt) for wkt in lines_gdf["wkb_geometry"].astype("string")],
         }
    )

    lines_inside_box = []
    if current_selected_sur_and_prof is not None and current_selected_sur_and_prof.get('multi') == True:

        # get the box data from the dict
        box = current_selected_sur_and_prof.get('box_selected_data')

        min_x, min_y = box[0][0], box[0][1]  # Lower left corner
        max_x, max_y = box[1][0], box[1][1]
        range_coordinates = [
            (min_x, min_y),
            (max_x, min_y),
            (max_x, max_y),
            (min_x, max_y),
            (min_x, min_y)  # Close the ring
        ]
        range_polygon = Polygon(range_coordinates)

        for index, row in lines_gdf.iterrows():
            geometry = row['wkb_geometry']
            profile = row['profname']

            if geometry.intersects(range_polygon):
                lines_inside_box.append(profile)
    else:
        lines_inside_box = []



    # Getting the colors change colors  mapped to each profile generated in the cpa table .py
    profile_colors_df = pd.DataFrame.from_dict(csa_profile_line_colors)
    profile_colors_df = profile_colors_df.rename(columns={'Profile': 'profile'})

    # join the colors to the line_data df

    # Merge line_data with profile_colors_df based on the 'Profile' column
    line_data = pd.merge(line_data, profile_colors_df[['profile', 'Baseline to Spring PCT Color']], on='profile')
    line_data = pd.merge(line_data, profile_colors_df[['profile', 'Spring to Spring PCT Color']], on='profile')
    try:
        line_data = pd.merge(line_data, profile_colors_df[['profile', 'Spring to Spring % Change']], on='profile')
        line_data = pd.merge(line_data, profile_colors_df[['profile', 'Baseline to Spring % Change']], on='profile')
    except KeyError as ke:
        line_data = pd.merge(line_data, profile_colors_df[['profile', 'Autumn to Autumn % Change']], on='profile')
        line_data = pd.merge(line_data, profile_colors_df[['profile', 'Baseline to Autumn % Change']], on='profile')



    # adding each WKT string as trace to the fig as a trace
    line_traces = []
    for i, row in line_data.iterrows():
        line = row["geometry"]

        # Extract only the first and last coordinates, some profiles have more than two data points.
        first_coordinate = line.coords[0]
        last_coordinate = line.coords[-1]

        latitudes = [first_coordinate[1], last_coordinate[1]]
        longitudes = [first_coordinate[0], last_coordinate[0]]

        # Added more points for each line, more points smoother larger click area
        interpolated_latitudes = np.linspace(latitudes[0], latitudes[-1], 20)
        interpolated_longitudes = np.linspace(longitudes[0], longitudes[-1], 20)

        # Get the survey_unit value for this row
        profile_line_id = row['profile']
        baseline = row['baseline']
        interim = row['interim']
        post_storm = row['post_storm']
        strategy = row['strategy']
        survey_unit = row['survey_unit']

        # add conditional here based on button selection to show spring to spring or baseline to baseline
        percent_change_row = None
        temp_state = change_range_radio_button
        popup_name = None
        if temp_state == 'spr-spr':
            try:
                percent_change_row = row['Spring to Spring % Change']
                popup_name = "Spring to Spring (PCT)"
            except KeyError as ke:
                percent_change_row = row['Autumn to Autumn % Change']
                popup_name = "Autumn to Autumn (PCT)"

            percent_change_color_row = row['Spring to Spring PCT Color']



        elif temp_state == 'base-spr':
            try:
                percent_change_row = row['Baseline to Spring % Change']
                popup_name = "Baseline to Spring (PCT)"
            except KeyError as ke:
                percent_change_row = row['Baseline to Autumn % Change']
                popup_name = "Baseline to Autumn (PCT)"

            percent_change_color_row = row['Baseline to Spring PCT Color']



        if not strategy:
            print('missing')

        # Check and set to 'None' if any variable is None. This caused a bug where custom data could not load
        profile_line_id = 'None' if profile_line_id is None else profile_line_id
        baseline = 'None' if baseline is None else baseline
        interim = 'None' if interim is None else interim
        post_storm = 'None' if post_storm is None else post_storm
        strategy = 'None' if strategy is None else strategy
        survey_unit = 'None' if survey_unit is None else survey_unit
        percent_change_row ='None' if percent_change_row is None else percent_change_row

        # Format the popup data
        custom_data = f"Profile Line ID: {profile_line_id}" \
                      f"<br>Interim: {interim.title()}" \
                      f"<br>Baseline: {baseline.title()}" \
                      f"<br>Post Storm: {post_storm.title()}" \
                      f"<br>Strategy: {strategy.title().replace('_', ' ')}" \
                      f"<br>{popup_name}: {percent_change_row} %"

        # Get the profile line value for this row
        profile_line_id = lines_gdf.iloc[i]["profname"]

        border_trace =None
        # Set the colors and width
        if current_selected_sur_and_prof is not None and current_selected_sur_and_prof.get('multi') == True:
            colour = "#e8d90c" if profile_line_id in lines_inside_box else "#246673"
            width = 8 if profile_line_id in lines_inside_box else 5
        else:
            if set_profile_line == profile_line_id:
                colour = percent_change_color_row
                width = 12
                dash_style = 'dash'
                # Create the border line trace
                border_trace = px.line_mapbox(
                    line_data,
                    lat=interpolated_latitudes,
                    lon=interpolated_longitudes,
                    hover_name=[custom_data] * len(interpolated_latitudes),
                    line_group=[custom_data] * len(interpolated_longitudes),

                )
                border_trace.update_traces(hoverinfo='none')
                border_trace.update_traces(line=dict(color='rgba(238, 255, 3,0.4)', width=18, ))

                # Add the LineString trace to the map, we have to use hovername to set popup values docs are awful
                # Add the LineString trace to the a map
                trace = px.line_mapbox(
                    line_data,
                    lat=interpolated_latitudes,
                    lon=interpolated_longitudes,
                    hover_name=[custom_data] * len(interpolated_latitudes),
                    line_group=[custom_data] * len(interpolated_longitudes),

                )
                trace.update_traces(line=dict(color=percent_change_color_row, width=width, ))



            else:
                colour = percent_change_color_row
                width = 5

                # Add the LineString trace to the map, we have to use hovername to set popup values docs are awful
                trace = px.line_mapbox(
                    line_data,
                    lat=interpolated_latitudes,
                    lon=interpolated_longitudes,
                    hover_name=[custom_data] * len(interpolated_latitudes),
                    line_group=[custom_data] * len(interpolated_longitudes),

                )


        # Format the label shown, must have the <extra></extra> to remove the xy coordinates being shown
        trace.update_traces(hovertemplate=f"<b>{custom_data}<b><extra></extra>"),
        trace.update_traces(hoverinfo='none')



        # Update the marker color
        trace.update_traces(line=dict(color=colour, width=5,))

        if border_trace:
            line_traces.append((border_trace))

        line_traces.append(trace)

    # Here we add the point as traces to the fig. The selected survey unit trace is added below the main traces.
    fig = go.Figure()  # Set the map center to the selected point)
    fig.add_trace(selected_survey_unit_trace)
    fig.add_traces(updated_scatter_trace.data)

    # fig.update_geos(center=dict(lat=center_lat, lon=center_lon))
    for i in range(len(line_traces)):
        fig.add_trace(line_traces[i].data[0])

    fig.update_layout(
        margin=dict(l=0, r=0, b=0, t=0),
        showlegend=False,

    )

    # Logic for controlling the zooming of the map
    old_map_data = map_state
    new_map_data = {"lat": center_lat, "lon": center_lon}
    try:
        if map_relayout_data != None:
            current_map_position = map_relayout_data['mapbox.center']
            current_map_zoom = map_relayout_data['mapbox.zoom']
        else:
            current_map_position = None
            current_map_zoom = None
    except Exception as e:
        print(e)
        current_map_position = None
        current_map_zoom = None

    # If current_map_position or current_map_zoom is None, use default values
    if current_map_position is None:
        current_map_position = DEFAULT_MAP_CENTER
    if current_map_zoom is None:
        current_map_zoom =16

    state_to_return = None
    if len(old_map_data.keys()) == 2:
        distance = haversine(old_map_data['lat'], old_map_data['lon'], new_map_data['lat'], new_map_data['lon'])
        distance_threshold = 1500

        if distance > distance_threshold:
            # If the distance is over the threshold, update the center and set the zoom
            current_center = new_map_data
            current_zoom = 13
            state_to_return = new_map_data

        else:
            # If the distance is not over the threshold, keep the current center and zoom
            if current_map_position:

                distance = haversine(current_map_position['lat'], current_map_position['lon'], new_map_data['lat'], new_map_data['lon'])
                distance_threshold = 1500
                if distance > distance_threshold:
                    current_center =new_map_data
                    current_zoom = 13
                    state_to_return = new_map_data
                else:
                    current_center = current_map_position
                    current_zoom = current_map_zoom
                    state_to_return = current_map_position
            else:
                current_center = old_map_data
                current_zoom = 13
                state_to_return = old_map_data
    else:
        # If the old_map_data doesn't have 'lat' and 'lon' keys, (Set the initial load zoom and center here!!)
        current_center = DEFAULT_MAP_CENTER
        current_zoom = 6
        state_to_return = current_center

    # Update the map layout
    fig.update_layout(mapbox={
        'style': basemap_selection,
        'accesstoken': MAPBOX_TOKEN,
        "center": current_center,
        "zoom": current_zoom,


        },#height=

      ),

    return fig, lines_inside_box, {'is_loading': True} , state_to_return, survey_points_change_values
